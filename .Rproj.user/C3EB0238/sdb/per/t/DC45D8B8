{
    "contents" : "rm(list = ls())\ndevtools::load_all(\".\")\n\n# packages\nrequire(\"MASS\")\nrequire(\"plot3D\")\nrequire(\"roxygen2\")\nrequire(\"devtools\")\nrequire(\"sde\")\nrequire(\"mixedsde\")\nrequire(\"mvtnorm\")\nrequire(\"moments\")\n\n#nettoie les codes\nlibrary(\"formatR\")\nformatR::tidy_dir(\"R\")\n\ndocument()\n\n ? mixedsde.pred\n ? simu.randomvariable\n ? mixedsde.sim\n ? mixedsde.fit\n ? eigenvaluesV  \n ? UV\n ? mixture.sim\n ? EstParamNormal\n ? likelihoodNormal\n ? BayesianNormal\n ? crack.data\n ? neuronal.data\n\n\n\n\ndevtools::load_all(\".\")\n#-----------------------------------------------\n#-- OU 1 additif random effect dXj(t)=(phij(t)-fixed Xj(t))dt+ sigma dWj(t)\n#-----------------------------------------------\n\nmodel = \"OU\"\nrandom <- 1\n# M <- 20     # number of observations 20 200\n# T <- 50    # width of the interval of observation 10  100 300\n# N <- 1000  # number of points in the time interval 2000\n# sigma <- 0.1  # diffusion coefficient 0.1 1\n# #-----------------------------------------------\n# #-- Normal density \n# density.phi <- \"normal\"\n# fixed <- 5\n# mu <- 3\n# eta <- 0.5\n# param <- c(mu, eta)\n# gridf <- seq(1, 5, length=200) # grid of values on which the density is estimated \n#-------------------\n#- simulation\n# par(mfrow=c(1,1))\n# \n# simu <- mixedsde.sim(M,T=T,N=N,model,random, fixed=fixed,density.phi, param, sigma, X0=0,op.plot=0)\n# X <- simu$X\n# phi <- simu$phi\n# times <-simu$times\n#######################################\n#### EXAMPLE 1 PAPER ##################\n#######################################\n-----------------------------------------\nmodel <- \"OU\"\nrandom <- 1\n\n sigma <- 0.1 ;fixed <- 5;\nM <- 50 ; T <- 1; N <- 500\ndensity.phi <- \"normal\" ; param <- c(3, 0.5);\ntimes <- seq(0, T, length= N+1)\nload (\"~/Documents/THESE/dossier_package/data/Xexample1OUT1.RData\")\n\n#gridf <- seq(1, 5, length=200) # grid of values on which the density is estimated \n#f <- exp(-(gridf - param[1])^2/(2 * param[2]^2))/(param[2] * sqrt(2 * pi))\n#plot(gridf,f,type='l',lwd=2)\n\nload(\"~/Documents/THESE/dossier_package/data/phiOUT1.RData\")\n\n#- nonparametric estimation\nestim.method <- 'nonparam'\nestim <- mixedsde.fit(times, X, model, random, fixed, estim.method) #, gridf=gridf) \noutputsNP <- out(estim)\nsum(outputsNP$cutoff==1)\n\n#- parametric estimation\nestim.method<-'paramML'\nestim_param <- mixedsde.fit(times, X, model, random, fixed, estim.method)#, gridf=gridf)\noutputsP <- out(estim_param)\n\ndevtools::load_all(\".\")\n############### implemented methods\nplot(estim)\nprint(estim)\nsummary(estim)\n\nplot(estim_param)\nprint(estim_param)\nsummary(estim_param)\n\nvalid <- Freq.valid(estim_param, X, model= 'OU',  times= times, random = 1, fixed = fixed, numj=floor(runif(1,1,M)))\n\ndevtools::load_all(\".\")\ntest1 <- pred(estim, X, model= model, random=1, fixed= fixed, estim.method= 'nonparam',T=T) \ntest2 <- pred(estim_param,  X, model= model, random=1, fixed= fixed, estim.method= 'paramML',T=T) \n\n############## more graphs\n\ngridf <- outputsNP$gridf\nf <- exp(-(gridf - param[1])^2/(2 * param[2]^2))/(param[2] * sqrt(2 * pi))\nfhat <- outputsNP$estimf\nfhat_param <- outputsP$estimf\n\nplot(gridf,f,type='l',lwd=2, xlab='', ylab='')\nlines(gridf,fhat_param,col='red', lty=2,lwd=1)\n#lines(gridf,fhat,col='red')\n#lines(gridf,fhat_trunc, col='blue')\n\nphihat <- outputsNP$estimphi \nphihat <- outputsP$estimphi  #estim@estimphi\n#phihat_trunc <- estim$estimphi_trunc\n#op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\nplot(phi, phihat, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = '', xlab = '', type = \"p\", pch = 18)\nabline(0, 1)\n#plot(phi, phihat_trunc, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(hat(A)), xlab = expression(phi), pch = 18)\n#abline(0, 1)\n#par(op)\n\n#-----------------------------------------------\nmodel = \"OU\"\nrandom <- 1\nM <- 63     # number of observations 20 200\nT <- 40    # width of the interval of observation 10  100 300\nN <- 164  # number of points in the time interval 2000\nsigma <- 0.014  # diffusion coefficient 0.1 1\nX0 <- 0\n#-- Gamma density \ndensity.phi <- \"normal\"\nfixed <- 0.1\nparam <- c(0.25, 0.017)\n#gridf <- seq(0, 1.5, length = 200)  # grid of values on which the density is estimated \n#f <- (gridf^(param[1] - 1)) * exp(-gridf/param[2])/((param[2])^param[1] * gamma(param[1]))\n#plot(gridf, f, type='l')\n#-------------------\n#- simulation\nsimu <- mixedsde.sim(M,T=T,N=N,model = model,random = random, fixed =fixed,density.phi, param = param, sigma = sigma, X0=X0,op.plot=0)\nX <- simu$X\nphi <- simu$phi\ntimes <-simu$times\n\n#- nonparametric estimation\nestim.method <- 'nonparam'\nestim <- mixedsde.fit(times, X, model, random, fixed, estim.method) #, gridf=gridf) \noutputsNP <- out(estim)\n\n#- parametric estimation\nestim.method<-'paramML'\nestim_param <- mixedsde.fit(times, X, model, random, fixed, estim.method)#, gridf=gridf)\noutputsP <- out(estim_param)\n\n############### implemented methods\nplot(estim)\nprint(estim)\nsummary(estim)\n\nplot(estim_param)\nprint(estim_param)\nsummary(estim_param)\n\nvalid1 <- Freq.valid(estim, X, model= 'OU',  times=times, random = 1, fixed = fixed, numj = 25)\nvalid1$plotnumj\n\ntest1 <- pred(estim, X, model= model, random=1, fixed= fixed, estim.method= 'nonparam',T=T) \ntest2 <- pred(estim_param,  X, model= model, random=1, fixed= fixed, estim.method= 'paramML',T=T) \n\n############## more graphs\n\ngridf <- outputsNP$gridf\nf <- dnorm(gridf, param[1], param[2])\nfhat <- outputsNP$estimf\nfhat_param <- outputsP$estimf\n\nplot(gridf,f,type='l',lwd=2)\nlines(gridf,fhat_param,col='red', lwd=2)\nlines(gridf,fhat,col='red')\n#lines(gridf,fhat_trunc, col='blue')\n\nphihat <- outputsNP$estimphi #estim@estimphi\n#phihat_trunc <- estim$estimphi_trunc\n#op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\nplot(phi, phihat, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(A), xlab = expression(phi), type = \"p\", pch = 18)\nabline(0, 1)\n#plot(phi, phihat_trunc, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(hat(A)), xlab = expression(phi), pch = 18)\n#abline(0, 1)\n#par(op)\n\n#-----------------------------------------------\n#-- Mixture Gamma density \ndensity.phi <- \"mixture.gamma\"\nfixed <- 1\nparam <- c(0.3,1.8,0.5,5.05,1)\nX0 <- 1\n#gridf <- seq(0, 7, length = 200)  # grid of values on which the density is estimated \n#f <- param[1]*1/gamma( param[2])*(gridf)^( param[2]-1)*exp(-(gridf)/ param[3])/ param[3]^ param[2] + (1- param[1])*1/gamma( param[4])*(gridf)^( param[4]-1)*exp(-(gridf)/ param[5])/ param[5]^ param[4]\n\n#-------------------\n#- simulation\nsimu <- mixedsde.sim(M,T=T,N=N,model=model,random=random, fixed=fixed,density.phi=density.phi, param=param, sigma=sigma, X0=X0)\nX <- simu$X\nphi <- simu$phi\ntimes <-simu$times\n#- nonparametric estimation\nestim.method <- 'nonparam'\nestim <- mixedsde.fit(times, X, model, random, fixed, estim.method) #, gridf=gridf) \noutputsNP <- out(estim)\n\n#- parametric estimation\nestim.method<-'paramML'\nestim_param <- mixedsde.fit(times, X, model, random, fixed, estim.method)#, gridf=gridf)\noutputsP <- out(estim_param)\n\n############### implemented methods\nplot(estim)\nprint(estim)\nsummary(estim)\n\nplot(estim_param)\nprint(estim_param)\nsummary(estim_param)\n\n\nvalid1 <- Freq.valid(estim, X, model= 'OU',  T=T, random = 1, fixed = fixed, numj=floor(runif(1,1,M)))\ntest1 <- pred(estim, X, model= model, random=1, fixed= fixed, estim.method= 'nonparam',T=T) \ntest2 <- pred(estim_param,  X, model= model, random=1, fixed= fixed, estim.method= 'paramML',T=T) \n\n############## more graphs\npar(mfrow = c(1, 1))\ngridf <- outputsNP$gridf\nf <- param[1]*1/gamma( param[2])*(gridf)^( param[2]-1)*exp(-(gridf)/ param[3])/ param[3]^ param[2] + (1- param[1])*1/gamma( param[4])*(gridf)^( param[4]-1)*exp(-(gridf)/ param[5])/ param[5]^ param[4]\nfhat <- outputsNP$estimf\nfhat_param <- outputsP$estimf\n\nplot(gridf,f,type='l',lwd=2)\nlines(gridf,fhat_param,col='red', lwd=2, lty=2)\nlines(gridf,fhat,col='red')\n#lines(gridf,fhat_trunc, col='blue')\n\nphihat <- outputsNP$estimphi #estim@estimphi\n#phihat_trunc <- estim$estimphi_trunc\n#op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\nplot(phi, phihat, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(A), xlab = expression(phi), type = \"p\", pch = 18)\nabline(0, 1)\n#plot(phi, phihat_trunc, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(hat(A)), xlab = expression(phi), pch = 18)\n#abline(0, 1)\n#par(op)\n\n\n\n\n#-----------------------------------------------\n#-- CIR 1 additif random effect dXj(t)=(phij(t)-fixed Xj(t))dt+ sigmasqrt(Xj(t)) dWj(t)\n#-----------------------------------------------\nmodel = \"CIR\"\nrandom <- 1\nM <- 20     # number of observations 20 200\nT <- 100    # width of the interval of observation 10  100 300\nN <- 1000  # number of points in the time interval 2000\nsigma <- 0.1  # diffusion coefficient 0.1 1\nX0 <- 0.5\n#-----------------------------------------------\n#-- Normal density \ndensity.phi <- \"normal\"\nfixed <- 3\nmu <- 3\neta <- 0.1\nparam <- c(mu, eta)\n#gridf <- seq(2.5, 3.5, 0.01)\n#f <- exp(-(gridf - param[1])^2/(2 * eta^2))/(eta * sqrt(2 * pi)) # grid of values on which the density is estimated \n#plot(gridf,f,type='l',lwd=2)\n#-------------------\n#- simulation\n#- simulation\nsimu <- mixedsde.sim(M,T=T,N=N,model=model,random=random, fixed=fixed,density.phi=density.phi, param=param, sigma=sigma, X0=X0)\nX <- simu$X\nphi <- simu$phi\ntimes <-simu$times\n#- nonparametric estimation\nestim.method <- 'nonparam'\nestim <- mixedsde.fit(times, X, model, random, fixed, estim.method) #, gridf=gridf) \noutputsNP <- out(estim)\n\n#- parametric estimation\nestim.method<-'paramML'\nestim_param <- mixedsde.fit(times, X, model, random, fixed, estim.method)#, gridf=gridf)\noutputsP <- out(estim_param)\n\n############### implemented methods\nplot(estim)\nprint(estim)\nsummary(estim)\n\nplot(estim_param)\nprint(estim_param)\nsummary(estim_param)\n\n\nvalid1 <- Freq.valid(estim, X, model= 'CIR',  T=T, random = 1, fixed = fixed, numj=floor(runif(1,1,M)))\ntest1 <- pred(estim, X, model= model, random=1, fixed= fixed, estim.method= 'nonparam',T=T) \ntest2 <- pred(estim_param,  X, model= model, random=1, fixed= fixed, estim.method= 'paramML',T=T) \n\n############## more graphs\n\ngridf <- outputsNP$gridf\nf <- exp(-(gridf - param[1])^2/(2 * eta^2))/(eta * sqrt(2 * pi)) # grid of values on which the density is estimated \nfhat <- outputsNP$estimf\nfhat_param <- outputsP$estimf\n\nplot(gridf,f,type='l',lwd=2)\nlines(gridf,fhat_param,col='red', lwd=2)\nlines(gridf,fhat,col='red')\n#lines(gridf,fhat_trunc, col='blue')\n\nphihat <- outputsNP$estimphi #estim@estimphi\n#phihat_trunc <- estim$estimphi_trunc\n#op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\nplot(phi, phihat, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(A), xlab = expression(phi), type = \"p\", pch = 18)\nabline(0, 1)\n#plot(phi, phihat_trunc, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(hat(A)), xlab = expression(phi), pch = 18)\n#abline(0, 1)\n#par(op)\n\n#-----------------------------------------------\nmodel = \"CIR\"\nrandom <- 1\nM <- 20     # number of observations 20 200\nT <- 100    # width of the interval of observation 10  100 300\nN <- 1000  # number of points in the time interval 2000\nsigma <- 0.1  # diffusion coefficient 0.1 1\n#-----------------------------------------------\n#-- Gamma density \ndensity.phi <- \"gamma\"\nfixed <- 1\nparam <- c(1.8, 0.8)\nX0 <- 1\n#n <- 200    # number of points for the grid of discretisation of the densities\n#gridf <- seq(0, 5, length = n)  # grid on which we evaluate the density f1\n#f <- (gridf^(param[1] - 1)) * exp(-gridf/param[2])/((param[2])^param[1] * gamma(param[1]))\n#-------------------\n#- simulation\n#- simulation\nsimu <- mixedsde.sim(M,T=T,N=N,model=model,random=random, fixed=fixed,density.phi=density.phi, param=param, sigma=sigma, X0=X0)\nX <- simu$X\nphi <- simu$phi\ntimes <-simu$times\n#- nonparametric estimation\nestim.method <- 'nonparam'\nestim <- mixedsde.fit(times, X, model, random, fixed, estim.method) #, gridf=gridf) \noutputsNP <- out(estim)\n\n#- parametric estimation\nestim.method<-'paramML'\nestim_param <- mixedsde.fit(times, X, model, random, fixed, estim.method)#, gridf=gridf)\noutputsP <- out(estim_param)\n\n############### implemented methods\nplot(estim)\nprint(estim)\nsummary(estim)\n\nplot(estim_param)\nprint(estim_param)\nsummary(estim_param)\n\nvalid1 <- Freq.valid(estim, X, model= 'CIR',  T=T, random = 1, fixed = fixed, numj=floor(runif(1,1,M)))\ntest1 <- pred(estim, X, model= model, random=1, fixed= fixed, estim.method= 'nonparam',T=T) \ntest2 <- pred(estim_param,  X, model= model, random=1, fixed= fixed, estim.method= 'paramML',T=T) \n\n############## more graphs\n\ngridf <- outputsNP$gridf\nf <- (gridf^(param[1] - 1)) * exp(-gridf/param[2])/((param[2])^param[1] * gamma(param[1]))\nfhat <- outputsNP$estimf\nfhat_param <- outputsP$estimf\n\nplot(gridf,f,type='l',lwd=2)\nlines(gridf,fhat_param,col='red', lwd=2)\nlines(gridf,fhat,col='red')\n#lines(gridf,fhat_trunc, col='blue')\n\nphihat <- outputsNP$estimphi #estim@estimphi\n#phihat_trunc <- estim$estimphi_trunc\n#op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\nplot(phi, phihat, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(A), xlab = expression(phi), type = \"p\", pch = 18)\nabline(0, 1)\n#plot(phi, phihat_trunc, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(hat(A)), xlab = expression(phi), pch = 18)\n#abline(0, 1)\n#par(op)\n\n#-----------------------------------------------\nmodel = \"CIR\"\nrandom <- 1\nM <- 20     # number of observations 20 200\nT <- 100    # width of the interval of observation 10  100 300\nN <- 1000  # number of points in the time interval 2000\nsigma <- 0.1  # diffusion coefficient 0.1 1\n\n#-- Mixture Gamma density \ndensity.phi <- \"mixture.gamma\"\nfixed <-1\nparam <- c(0.3,1.8,0.5,5.05,1)\nX0 <- 1\n#gridf <- seq(0, 7, length = 200)  # grid on which we evaluate the density f1\n#f <- param[1]*1/gamma( param[2])*(gridf)^( param[2]-1)*exp(-(gridf)/ param[3])/ param[3]^ param[2] + (1- param[1])*1/gamma( param[4])*(gridf)^( param[4]-1)*exp(-(gridf)/ param[5])/ param[5]^ param[4]\n\n#- simulation\nsimu <- mixedsde.sim(M,T=T,N=N,model=model,random=random, fixed=fixed,density.phi=density.phi, param=param, sigma=sigma, X0=X0)\nX <- simu$X\nphi <- simu$phi\ntimes <-simu$times\n#- nonparametric estimation\nestim.method <- 'nonparam'\nestim <- mixedsde.fit(times, X, model, random, fixed, estim.method) #, gridf=gridf) \noutputsNP <- out(estim)\n\n#- parametric estimation\nestim.method<-'paramML'\nestim_param <- mixedsde.fit(times, X, model, random, fixed, estim.method)#, gridf=gridf)\noutputsP <- out(estim_param)\n\n############### implemented methods\nplot(estim)\nprint(estim)\nsummary(estim)\n\nplot(estim_param)\nprint(estim_param)\nsummary(estim_param)\n\nvalid1 <- Freq.valid(estim, X, model= 'CIR',  T=T, random = 1, fixed = fixed, numj=floor(runif(1,1,M)))\ntest1 <- pred(estim, X, model= model, random=1, fixed= fixed, estim.method= 'nonparam',T=T) \ntest2 <- pred(estim_param,  X, model= model, random=1, fixed= fixed, estim.method= 'paramML',T=T) \n\n############## more graphs\n\ngridf <- outputsNP$gridf\nf <- param[1]*1/gamma( param[2])*(gridf)^( param[2]-1)*exp(-(gridf)/ param[3])/ param[3]^ param[2] + (1- param[1])*1/gamma( param[4])*(gridf)^( param[4]-1)*exp(-(gridf)/ param[5])/ param[5]^ param[4]\nfhat <- outputsNP$estimf\nfhat_param <- outputsP$estimf\n\nplot(gridf,f,type='l',lwd=2)\nlines(gridf,fhat_param,col='red', lwd=2)\nlines(gridf,fhat,col='red')\n#lines(gridf,fhat_trunc, col='blue')\n\nphihat <- outputsNP$estimphi #estim@estimphi\n#phihat_trunc <- estim$estimphi_trunc\n#op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\nplot(phi, phihat, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(A), xlab = expression(phi), type = \"p\", pch = 18)\nabline(0, 1)\n#plot(phi, phihat_trunc, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = expression(hat(A)), xlab = expression(phi), pch = 18)\n#abline(0, 1)\n#par(op)",
    "created" : 1454590048917.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2701476296",
    "id" : "DC45D8B8",
    "lastKnownWriteTime" : 1454514434,
    "path" : "~/Documents/THESE/dossier_package/package/script_random1.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}