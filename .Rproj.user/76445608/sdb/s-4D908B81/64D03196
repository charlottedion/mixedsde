{
    "contents" : "#' Estimation Of The Random Effects In Mixed Stochastic Differential Equations\n#' \n#' @description Estimation of the random effects \\eqn{(\\alpha_j, \\beta_j)} and of their density, parametrically or nonparametrically in the mixed SDE\n#'  \\eqn{dX_j(t)= (\\alpha_j- \\beta_j X_j(t))dt + \\sigma a(X_j(t)) dW_j(t)}.\n#' @param times vector of observation times\n#' @param X matrix of the M trajectories (each row is a trajectory with as much columns as observations)\n#' @param model name of the SDE: 'OU' (Ornstein-Uhlenbeck) or 'CIR' (Cox-Ingersoll-Ross)\n#' @param random random effects in the drift: 1 if one additive random effect, 2 if one multiplicative random effect or c(1,2) if 2 random effects\n#' @param fixed fixed effect in the drift: value of the fixed effect when there is only one random effect, 0 otherwise\n#' @param estim.method estimation method: 'paramML' for a Gaussian parametric estimation by maximum likelihood, 'paramBayes' for a Gaussian parametric Bayesian estimation or 'nonparam' for a non-parametric estimation\n#' @param gridf if nonparametric estimation: grid of values on which the density is estimated, a matrix with two rows if two random effects; NULL by default and\n#' then grid is chosen as a function of the estimated values of the random effects. For the plots this grid is used.\n#' @param prior if method = 'paramBayes', list of prior parameters: mean and variance of the Gaussian prior on the mean mu, shape and scale of the inverse Gamma prior for the variances omega, shape and scale of the inverse Gamma prior for sigma  \n#' @param nMCMC if method = 'paramBayes', number of iterations of the MCMC algorithm\n#' @return\n#'\n#' \\item{index}{is the vector of subscript in \\eqn{1,...,M} where the estimation of \\eqn{phi} has been done,  most of the time \\eqn{index= 1:M}}\n#' \\item{estimphi}{matrix of estimators of \\eqn{\\phi=\\alpha, or \\beta, or (\\alpha,\\beta)} from the efficient statitics (see \\code{\\link{UV}}), matrix of two lines if random =c(1,2), numerical type otherwise}\n#' \\item{gridf}{grid of values on which the estimated is done for the nonparametric method, otherwise, grid used for the plots, matrix form}\n#' \\item{estimf}{estimator of the density of \\eqn{\\phi} from a kernel estimator from \\code{\\link[stats]{density}} or \\code{\\link[MASS]{kde2D}}, matrix form: one line if one random effect or square matrix otherwise}\n#' If there is a truncation threshold in the estimator\n#' \\item{cutoff}{the binary vector of cutoff, FALSE otherwise}\n#' \\item{estimphi_trunc}{troncated estimator of \\eqn{\\phi}, vector or matrix of 0 if we do not use truncation, matrix of two lines if random =c(1,2), numerical type otherwise}\n#' \\item{estimf_trunc}{troncated estimator of the density of \\eqn{\\phi}, vector or matrix of 0 if we do not use truncation, matrix if random =c(1,2), numerical type otherwise}\n#' For the parametric maximum likelihood estimation \n#' \\item{mu}{estimator of the mean of the random effects normal density, 0 if we do nonparametric estimation}\n#' \\item{omega}{estimator of the standard deviation of the random effects normal density, 0 if we do nonparametric estimation}\n#' \\item{bic}{BIC criterium, 0 if we do nonparametric estimation}\n#' \\item{aic}{AIC criterium, 0 if we do nonparametric estimation}\n#' \n#' @details\n#' Estimation of the random effects density from M independent trajectories of the SDE (the Brownian motions \\eqn{Wj} are independent), with linear drift. Two diffusions are implemented, with one or two random effects:\n#' \\subsection{Ornstein-Uhlenbeck model (OU)}{\n#' If random = 1, \\eqn{\\beta} is a fixed effect: \\eqn{dX_j(t)= (\\alpha_j- \\beta X_j(t))dt + \\sigma dW_j(t)  } \n#' \n#' If random = 2, \\eqn{\\alpha} is a fixed effect: \\eqn{dX_j(t)= (\\alpha - \\beta_j X_j(t))dt + \\sigma dW_j(t)  }\n#' \n#' If random = c(1,2), \\eqn{dX_j(t)= (\\alpha_j- \\beta_j X_j(t))dt + \\sigma dW_j(t)  } \n#' }\n#' \\subsection{Cox-Ingersoll-Ross model (CIR)}{\n#' If random = 1, \\eqn{\\beta} is a fixed effect: \\eqn{dX_j(t)= (\\alpha_j- \\beta X_j(t))dt + \\sigma \\sqrt{X_(t)} dWj_(t)  } \n#' \n#' If random = 2, \\eqn{\\alpha} is a fixed effect: \\eqn{dX_j(t)= (\\alpha - \\beta_j X_j(t))dt + \\sigma \\sqrt{X_j(t)} dW_j(t)  } \n#' \n#' If random = c(1,2), \\eqn{dXj(t)= (\\alpha_j- \\beta_j Xj(t))dt + \\sigma \\sqrt{Xj(t)}  dWj(t)  } \n#'}\n#' The nonparametric method estimates the density of the random effects with a kernel estimator (one-dimensional or two-dimensional density).\n#' The parametric method estimates the mean and standard deviation of the Gaussian distribution of the random effects. \n\n#' @examples\n#' #Choices\n#' model = 'OU'; M <- 50;  T <- 100 ; delta <- 0.01; N <- floor(T/delta); sigma <- 0.01 ; random <- c(1,2); density.phi <- 'normalnormal';\n#' param<- c(0.4, 0.5, 1, 0.2);  \n#' simu <- mixedsde.sim(M=M,T=T,N=N,model=model,random=random,density.phi=density.phi,param=param,sigma=sigma, invariant = 1)\n#' X <- simu$X ; phi <- simu$phi; times <- simu$times\n#' estim.method<- 'nonparam'\n#' estim <- mixedsde.fit(times=times, X=X, model=model, random=random, estim.method= 'nonparam') \n#' #To stock the results of the function \\code{mixedsde.fit}, use method \\code{out}\n#' #which put the outputs of the function on a list according to the frequentist or Bayesian approach.\n#' outputsNP <- out(estim)\n#' plot(estim)\n#' # It represents the bidimensional density, the histogram of the first estimated random effect \\eqn{\\alpha} with the\n#' # marginal of \\eqn{\\hat{f}} from the first coordonate which estimates the density of \\eqn{\\alpha}. And the same for the \n#' # second random effect \\eqn{\\beta}. More, it plots a qq-plot for the sample of estimator of the random effects\n#'# compared with the quantiles of a Gaussian sample with the same mean and standard deviation.\n#' \n#' summary(estim)\n#' print(estim)\n#' # Validation \n#' # If numj is fixed by the user: this function simulates Mrep =100 (by default) new trajectories with the value of the\n#' #estimated random effect. Then it plots on the left graph the Mrep new trajectories \\eqn{(Xnumj^{k}(t1), ... Xnumj^{k}(tN)), k= 1, ... Mrep}\n#' #with in red the true trajectory \\eqn{(Xnumj(t1), ... Xnumj(tN))}. \n#' #The right graph is a qq-plot of the quantiles of samples \\eqn{(Xnumj^{1}(ti), ... Xnumj^{Mrep}(ti))}\n#' #for each time \\eqn{ti} compared with the uniform quantiles. The outputs of the function are: a matrix \\code{Xnew} dimension Mrepx N+1, vector \n#' #of quantiles \\code{quantiles} length N and the number of the trajectory for the plot \\code{plotnumj= numj} \n#' # If numj is not precised by the user, then, this function simulates Mrep =100 (by default) new trajectories for each estimated\n#' #random effect. Then left graph is a plot of the Mrep new trajectories \\eqn{(Xj^{k}(t1), ... Xj^{k}(tN)), k= 1, ... Mrep}\n#' #for a randomly chosen number j with in red the true trajectory \\eqn{(Xj(t1), ... Xj(tN))}. \n#' #The right graph is a qq-plot of the quantiles of samples \\eqn{(Xj^{1}(ti), ... Xj^{Mrep}(ti))}, for the same j and \n#' #for each time \\eqn{ti}. The outputs of the function are: a list of matrices \\code{Xnew} length M, matrix of quantiles \\code{quantiles} dimension MxN and the \n#' #number of the trajectory for the plot \\code{plotnumj} \n#' \n#' validation <- Freq.valid(estim, X, model= model,  times=times, random = random, fixed = fixed, numj=floor(runif(1,1,M)))\n#' \n#' # Parametric estimation\n#' estim.method<-'paramML'\n#' estim_param <- mixedsde.fit(times= times, X= X, model= model, random= random, estim.method = 'paramML') \n#' outputsP <- out(estim_param)\n#' plot(estim_param)\n#' summary(estim_param)\n#' \n#' # Prediction for the frequentist approach\n#' # This function uses the estimation of the density function to simulate a new sample of random\n#' # effects according to this density. If \\code{plot.pred =1} (default) is plots on the top \n#' # the predictive random effects versus the estimated random effects from the data. \n#' # On the bottom, the left graph is the true trajectories, on the right the predictive trajectories\n#' # and the empiric prediciton intervals at level \\code{level=0.05} (defaut).\n#' # The function return on a list the prediction of phi \\code{phipred}, the prediction of X \\code{Xpred}, \n#' # and the indexes of the corresponding true trajectories \\code{indexpred} \n#' \n#' test1 <- pred(estim, X, model= model, random=random, fixed= fixed, estim.method= 'nonparam',T=T) \n#' test2 <- pred(estim_param,  X, model= model, random=random, fixed= fixed, estim.method= 'paramML',T=T) \n#' \n#' # More graph\n#' fhat <- outputsNP$estimf  \n#' fhat_param <- outputsP$estimf\n#' gridf <- outputsNP$gridf; gridf1 <- gridf[1,]; gridf2 <- gridf[2,]\n#' marg1 <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat,1,sum) \n#' marg2 <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat,2,sum)\n#' marg1_param <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_param,1,sum) \n#' marg2_param <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_param,2,sum)\n#' f1 <-  exp(-(gridf1-param[1])^2/(2*param[2]^2))/(param[2]*sqrt(2*pi))\n#' f2 <-  exp(-(gridf2-param[3])^2/(2*param[4]^2))/(param[4]*sqrt(2*pi))\n#' par(mfrow=c(1,2))\n#' plot(gridf1,f1,type='l', lwd=1,  xlab='', ylab='')\n#' lines(gridf1,marg1,col='red', lwd=2)\n#' lines(gridf1,marg1_param,col='red', lwd=2, lty=2)\n#' plot(gridf2,f2,type='l', lwd=1, xlab='', ylab='')\n#' lines(gridf2,marg2,col='red', lwd=2)\n#' lines(gridf2,marg2_param,col='red', lwd=2, lty=2)\n#' \n#' phihat <- outputsNP$estimphi \n#' plot(phi, phihat, xlim = c(0, max(phihat)+0.2), ylim = c(0, max(phihat)+0.2), ylab = '', xlab = '', type = 'p', pch = 18)\n#' abline(0, 1)\n#' \n#' \n#' # Parametric Bayesian estimation \n#' # one random effect\n#' model = 'OU'; random <- 1; sigma <- 0.1 ;fixed <- 5\n#' M <- 50 ; T <- 1; N <- 100\n#' density.phi <- 'normal' ; param <- c(3, 0.5)\n#' \n#' simu <- mixedsde.sim(M, T=T, N=N, model, random, fixed=fixed, density.phi, param, sigma, X0=0, op.plot=0)\n#' X <- simu$X ; phi <- simu$phi; times <- simu$times\n#' plot(times, X[1,], ylim=range(X), type='l'); for(i in 2:M) lines(times, X[i,])\n#' \n#' estim_Bayes_withoutprior <- mixedsde.fit(times, X, model, random, estim.method='paramBayes', nMCMC=1000) \n#' plot(estim_Bayes_withoutprior)\n#' \n#' prior <- list( m=c(param[1], fixed), v=c(param[1], fixed), alpha.omega=11, beta.omega=param[2]^2*10,\n#' alpha.sigma=10, beta.sigma=sigma^2*9)\n#' estim_Bayes <- mixedsde.fit(times, X, model, random, estim.method='paramBayes', prior=prior, nMCMC=1000) \n#' \n#' plot(estim_Bayes)\n#' outputBayes <- out(estim_Bayes)\n#' summary(outputBayes)\n#' (results_Bayes <- summary(estim_Bayes))\n#' plot(estim_Bayes, style='cred.int', true.phi=phi)\n#' plot(estim_Bayes_withoutprior, style='cred.int', true.phi=phi, reduced=TRUE)\n#' \n#' plot.compare(estim_Bayes, estim_Bayes_withoutprior, names=c(\"with prior\", \"without prior\"))\n#' \n#' print(estim_Bayes)\n#' \n#' pred.result <- pred(estim_Bayes)\n#' summary(out(pred.result))\n#' plot(pred.result)\n#' \n#' pred.result.trajectories <- pred(estim_Bayes, trajectories = TRUE)\n#' \n#' # second example\n#' \n#' model = 'CIR'; random <- 2; sigma <- 0.2 ;fixed <- 5\n#' M <- 20 ; T <- 1; N <- 100\n#' density.phi <- 'normal' ; param <- c(3, 0.5)\n#' \n#' simu <- mixedsde.sim(M, T=T, N=N, model, random, fixed=fixed, density.phi, param, sigma, X0=0.1, op.plot=0)\n#' X <- simu$X ; phi <- simu$phi; times <- simu$times\n#' plot(times, X[1,], ylim=range(X), type='l'); for(i in 2:M) lines(times, X[i,])\n#' \n#' prior <- list( m=c(fixed, param[1]), v=c(fixed, param[1]), alpha.omega=11, beta.omega=param[2]^2*10,\n#' alpha.sigma=10, beta.sigma=sigma^2*9)\n#'\n#' estim_Bayes <- mixedsde.fit(times, X, model, random, estim.method='paramBayes', prior=prior, nMCMC=1000) \n#' plot(estim_Bayes)\n#' outputBayes <- out(estim_Bayes)\n#' summary(outputBayes)\n#' (results_Bayes <- summary(estim_Bayes))\n#' plot(estim_Bayes, style='cred.int', true.phi=phi, reduced=TRUE)\n#' \n#' print(estim_Bayes)\n#' pred.result <- pred(estim_Bayes)\n#' summary(out(pred.result))\n#' plot(pred.result)\n#'\n#' # for two random effects\n#' model = 'OU'; random <- c(1,2); sigma <- 0.1 \n#' M <- 20 ; T <- 1; N <- 100\n#' density.phi <- 'normalnormal' ; param <- c(3, 0.5, 5, 0.2)\n#' \n#' simu <- mixedsde.sim(M,T=T,N=N,model,random, density.phi=density.phi, param=param, sigma=sigma, X0=0,op.plot=0)\n#' X <- simu$X ; phi <- simu$phi; times <- simu$times\n#' plot(times, X[1,], ylim=range(X), type='l'); for(i in 2:M) lines(times, X[i,])\n#' \n#' estim_Bayes_withoutprior <- mixedsde.fit(times, X, model, random, estim.method='paramBayes', nMCMC=1000)\n#' plot(estim_Bayes_withoutprior, style='cred.int', true.phi=phi, reduced=TRUE)\n#'  \n#' prior <- list( m=param[c(1,3)], v=param[c(1,3)], alpha.omega=c(11,11), beta.omega=param[c(2,4)]^2*10,\n#' alpha.sigma=10, beta.sigma=sigma^2*9)\n#'\n#' estim_Bayes <- mixedsde.fit(times, X, model, random, estim.method='paramBayes', prior=prior, nMCMC=1000) \n#' outputBayes <- out(estim_Bayes)\n#' summary(outputBayes)\n#' summary(estim_Bayes)\n#' plot(estim_Bayes)\n#' plot(estim_Bayes, style='cred.int', true.phi=phi)\n#' print(estim_Bayes)\n#' \n#' pred.result <- pred(estim_Bayes)\n#' \n#' # for Virkler data\n#' data(\"crack.data\")\n#' X <- crack.data[[1]]\n#' times <- crack.data[[2]]\n#' \n#' estim_Bayes_Virkler1 <- mixedsde.fit(times, X, model=\"OU\", random=1, estim.method='paramBayes', nMCMC=2000)\n#' estim_Bayes_Virkler2 <- mixedsde.fit(times, X, model=\"OU\", random=2, estim.method='paramBayes', nMCMC=2000) \n#' estim_Bayes_Virkler12 <- mixedsde.fit(times, X, model=\"OU\", random=c(1,2), estim.method='paramBayes', nMCMC=2000)\n#' \n#' plot(estim_Bayes_Virkler1)\n#' plot(estim_Bayes_Virkler2, reduced = TRUE, plot.priorMean = FALSE)\n#' plot(estim_Bayes_Virkler12, reduced = TRUE, style = \"density\", plot.priorMean = FALSE)\n#' plot.compare(estim_Bayes_Virkler1, estim_Bayes_Virkler2, estim_Bayes_Virkler12, names=c(\"random=1\", \"random=2\", \"random=(1,2)\"))\n#' \n#' pred.result1 <- pred(estim_Bayes_Virkler1)\n#' pred.result2 <- pred(estim_Bayes_Virkler2)\n#' pred.result12 <- pred(estim_Bayes_Virkler12)\n#' \n#' plot.compare(pred.result1, pred.result2, pred.result12, names=c(\"random=1\", \"random=2\", \"random=(1,2)\"))\n#' \n#' pred.result1_traj <- pred(estim_Bayes_Virkler1, trajectories=TRUE)\n#' pred.result2_traj <- pred(estim_Bayes_Virkler2, trajectories=TRUE)\n#' pred.result12_traj <- pred(estim_Bayes_Virkler12, trajectories=TRUE)\n#' \n#' plot.compare(pred.result1_traj, pred.result2_traj, pred.result12_traj, names=c(\"random=1\", \"random=2\", \"random=(1,2)\"))\n\n\n\n#' \n#' @keywords estimation\n#' @references For the parametric estimation see:\n#' Maximum likelihood estimation for stochastic differential equations with random effects, M. Delattre, V. Genon-Catalot and A. Samson, \\emph{Scandinavian Journal of Statistics 2012}, Vol 40, \\bold{322--343}\n#' \n#' For the nonparametric estimation see:\n#' \n#' Nonparametric estimation for stochastic differential equations with random effects, F. Comte, V. Genon-Catalot and A. Samson, \\emph{Stochastic Processes and Their Applications 2013}, Vol 7, \\bold{2522--2551}\n#' \n#' Estimation for stochastic differential equations with mixed effects, V. Genon-Catalot and C. Larédo 2014 \\emph{e-print: hal-00807258 }\n#' \n#' Bidimensional random effect estimation in mixed stochastic differential model, C. Dion and V. Genon-Catalot,  \\emph{Stochastic Inference for Stochastic Processes 2015, Springer Netherlands}, \\bold{1--28}\n\nmixedsde.fit <- function(times, X, model = c(\"OU\", \"CIR\"), random, fixed = 0, estim.method = c(\"nonparam\", \"paramML\", \"paramBayes\"), gridf = NULL, prior, nMCMC = NULL) {\n    model <- match.arg(model)\n    estim.method <- match.arg(estim.method)\n    \n    if (is.matrix(X)) {\n        if (nrow(X) == length(times)) {\n            X <- t(X)\n        } else {\n            if (ncol(X) != length(times)) {\n                print(\"length of times has to be equal to the columns of X\")\n                break\n            }\n        }\n    }\n    \n    M <- dim(X)[1]\n    K <- dim(X)[2]\n    delta <- round(diff(times), 10)  #diff(times)[1]\n    Tend <- times[length(times)]\n    \n    if (estim.method == \"paramBayes\") {\n      if(missing(prior)){\n        ind.4.prior <- 1:max(3, ceiling(M/10))\n        X.4.prior <- X[ind.4.prior, ]\n        estimUV <- UV(X.4.prior, model, random = c(1,2), fixed = 0, times) # fixed is only used for random == 1\n        U <- estimUV$U\n        V <- estimUV$V\n        deter <- lapply(V, det)\n        index <- which((deter != Inf) & (deter != 0))\n        Mindex <- length(index)\n        V <- V[index]\n        U <- U[, index]\n        \n\n        if(length(V) == 0){\n          l.prior <- length(ind.4.prior)\n          while(length(V) == 0 & max(ind.4.prior) + l.prior - 1 < M){\n            ind.4.prior <- ind.4.prior + l.prior\n            X.4.prior <- X[ind.4.prior, ]\n            estimUV <- UV(X.4.prior, model, random = c(1,2), fixed = 0, times) # fixed is only used for random == 1\n            U <- estimUV$U\n            V <- estimUV$V\n            deter <- lapply(V, det)\n            index <- which((deter != Inf) & (deter != 0))\n            Mindex <- length(index)\n            V <- V[index]\n            U <- U[, index]\n          }\n        }  \n        if(length(V) == 0){\n            print(\"please specify prior parameters\")\n            prior <- list( m=c(1,1), v=c(10,10), alpha.omega=rep(3, length(random)), beta.omega=rep(10, length(random))*2, alpha.sigma=3, beta.sigma=1*2)\n            print(\"parameters are set to:\"); print(unlist(prior))\n        }else{\n          \n        A <- matrix(0, 2, Mindex)\n        for (j in 1:Mindex) {\n          A[,j] <- (1/det(V[[j]])) * matrix(c(V[[j]][2, 2], -V[[j]][1, 2], -V[[j]][1, 2], V[[j]][1, 1]), 2, 2) %*% U[, j]\n        }\n        estimphi <- A\n\n        mu <- apply(estimphi, 1, mean)\n        Omega <- apply(estimphi, 1, var)\n        if(model == \"OU\") var.fun <- function(x) 1\n        if(model == \"CIR\") var.fun <- function(x) x\n        \n        sigma2 <- mean(sapply(1:Mindex, function(i) mean(diff(X.4.prior[index[i], 2:K])^2 * (1/delta[1:(K - 2)]) * var.fun(1/X.4.prior[index[i], 3:K])) ))\n        prior <- list( m=mu, v=abs(mu), alpha.omega=rep(3, length(random)), beta.omega=Omega[random]*2, alpha.sigma=3, beta.sigma=sigma2*2)\n        print(\"attention: series\"); print(ind.4.prior); print(\"are used for prior parameter calculation\")\n        }\n      }else{\n        ind.4.prior <- M + 1\n      }\n        res <- BayesianNormal(times, X[-ind.4.prior,], model, prior, start = list(mu = prior$m, sigma = prior$beta.sigma/(prior$alpha.sigma - 1)), random, nMCMC)\n        he <- diagnostic(res, random)\n        return(new(Class = \"Bayes.fit\", prior = prior, alpha = as.matrix(res$alpha), beta = as.matrix(res$beta), random = random, mu = as.matrix(res$mu), omega = as.matrix(res$omega), \n            sigma2 = res$sigma2, burnIn = he$burnIn, thinning = he$thinning, model = model, times = times, Xdata = X, ind.4.prior = ind.4.prior))\n        \n    } else {\n        \n        if (sum(random) > 2) {\n            \n            # -- computation of the sufficient statistics\n            U <- matrix(0, 2, M)\n            V <- as.list(1:M)\n            b <- as.list(1:M)\n            \n            estimUV <- UV(X, model, random, fixed, times)\n            U <- estimUV$U\n            V <- estimUV$V\n            \n            deter <- lapply(V, det)\n            index <- which((deter != Inf) & (deter != 0))\n            Mindex <- length(index)\n            V <- V[index]\n            U <- U[, index]\n            \n            # estimation of the random effects phi\n            A <- matrix(0, Mindex, 2)\n            for (j in 1:Mindex) {\n                A[j, ] <- (1/det(V[[j]])) * matrix(c(V[[j]][2, 2], -V[[j]][1, 2], -V[[j]][1, 2], V[[j]][1, 1]), 2, 2) %*% U[, j]\n            }\n            estimphi <- t(A)\n            eigenvalues <- eigenvaluesV(V)\n            \n            \n            # estimation of sigma^2\n            if (model == \"OU\") {\n                \n                meanU <- rep(0, Mindex)\n                for (i in 1:Mindex) {\n                  meanU[i] <- mean((diff(X[index[i], 2:K])^2) * (1/delta[1:(K - 2)]))\n                }\n                sigma2 <- mean(meanU)\n            }\n            if (model == \"CIR\") {\n                \n                index <- intersect(which(apply(X <= 0, 1, sum) == 0), index)\n                Mindex <- length(index)\n                if (Mindex == 0) {\n                  print(\"All the trajectories have non positive values\")\n                }\n                if (Mindex > 0) {\n                  meanU <- rep(0, Mindex)\n                  for (i in 1:Mindex) {\n                    meanU[i] <- mean(diff(X[index[i], 2:K])^2 * (1/delta[1:(K - 2)]) * (1/X[index[i], 3:K]))\n                  }\n                  sigma2 <- mean(meanU)\n                }\n            }\n            \n            if (is.null(gridf) == 1) {\n                gridf <- matrix(0, 2, 500)\n                gridf[1, ] <- seq(min(estimphi[1, ]) * 0.8, max(estimphi[1, ]) * 1.2, length = 500)\n                gridf[2, ] <- seq(min(estimphi[2, ]) * 0.8, max(estimphi[2, ]) * 1.2, length = 500)\n            }\n            \n            if (is.null(gridf) == 0) {\n                gridf <- gridf\n            }\n            \n            if (estim.method == \"nonparam\") {\n                # troncation of the phi estimators\n                \n                kap <- 0.125\n                cutoff <- apply(eigenvalues, 1, min) * (1/sigma2) > kap * sqrt(Tend)\n                estimphi_trunc <- estimphi * matrix(c(cutoff, cutoff), 2, dim(estimphi)[2], byrow = TRUE)\n                \n                # estimation of the density\n                \n                estimf <- kde2d(estimphi[1, ], estimphi[2, ], n = length(gridf[1, ]), lims = c(min(gridf[1, ]), max(gridf[1, ]), min(gridf[2, ]), max(gridf[2, ])))$z\n                \n                if (sum(cutoff) >= 0.25 * Mindex) {\n                  estimf_trunc <- kde2d(estimphi_trunc[1, ], estimphi_trunc[2, ], n = length(gridf[1, ]), lims = c(min(gridf[1, ]), max(gridf[1, ]), min(gridf[2, ]), \n                    max(gridf[2, ])))$z\n                }\n                if (sum(cutoff) < 0.25 * Mindex) {\n                  print(\"warning: more than 75 percents of the estimated values of the random effect have been put to zero\")\n                  estimf_trunc <- matrix(0, 2, length(gridf[1, ]))\n                }\n                \n                bic <- 0\n                aic <- 0\n                mu <- 0\n                omega <- 0\n            }\n            \n            if (estim.method == \"paramML\") {\n                # estimphi has Mindex colomns maximization of the likelihood\n                \n                Vsigma2 <- as.list(1:length(V))\n                for (i in 1:length(V)) {\n                  Vsigma2[[i]] <- V[[i]] * (1/sigma2)\n                }\n                \n                res <- EstParamNormal(estimphi, Vsigma2, random)\n                \n                bic <- res$BIChere\n                aic <- res$AIChere\n                mu <- res$mu\n                omega <- res$omega\n                # computation of the densities\n                estimf1 <- dnorm(gridf[1, ], mean = mu[1], sd = abs(omega[1]))\n                estimf2 <- dnorm(gridf[2, ], mean = mu[2], sd = abs(omega[2]))\n                \n                estimf <- estimf1 %*% t(estimf2)\n                \n                estimf_trunc <- estimf\n                estimphi_trunc <- estimphi\n                \n                cutoff <- FALSE\n            }\n        }\n        \n        if (length(random) == 1) {\n            \n            # computation of the sufficient statistics\n            U <- rep(0, M)\n            V <- rep(0, M)\n            estimUV <- UV(X, model, random, fixed, times)\n            U <- estimUV$U\n            V <- estimUV$V\n            \n            # estimation of the random effect phi\n            index <- which((V != Inf) & (V != 0))\n            Mindex <- length(index)\n            V <- V[index]\n            U <- U[index]\n            A <- U/V\n            estimphi <- A\n            \n            # estimation of sigma^2\n            if (model == \"OU\") {\n                \n                meanU <- rep(0, Mindex)\n                for (i in 1:Mindex) {\n                  \n                  meanU[i] <- mean((diff(X[index[i], 2:K])^2) * (1/delta[1:(K - 2)]))\n                }\n                sigma2 <- mean(meanU)\n            }\n            if (model == \"CIR\") {\n                index <- intersect(which(apply(X <= 0, 1, sum) == 0), index)\n                Mindex <- length(index)\n                meanU <- rep(0, Mindex)\n                for (i in 1:Mindex) {\n                  \n                  meanU[i] <- mean(diff(X[index[i], 2:K])^2 * (1/delta[1:(K - 2)]) * (1/X[index[i], 3:K]))\n                  \n                }\n                sigma2 <- mean(meanU)\n            }\n            \n            if (is.null(gridf) == 1) {\n                gridf <- seq(min(estimphi) * 0.8, max(estimphi) * 1.2, length = 500)\n            }\n            \n            if (is.null(gridf) == 0) {\n                gridf <- gridf\n            }\n            \n            if (estim.method == \"paramML\") {\n                # maximisation of the likelihood\n                \n                res <- EstParamNormal(estimphi, V * (1/sigma2), random)\n                bic <- res$BIChere\n                aic <- res$AIChere\n                mu <- res$mu\n                omega <- res$omega\n                \n                # estimation of the density\n                estimf <- matrix(dnorm(gridf, mean = res$mu, sd = abs(res$omega)), 1, length(gridf), byrow = TRUE)\n                gridf <- matrix(gridf, 1, length(gridf), byrow = TRUE)\n                estimphi <- matrix(estimphi, 1, length(estimphi), byrow = TRUE)\n                estimphi_trunc <- estimphi\n                estimf_trunc <- estimf\n                cutoff <- FALSE\n            }\n            \n            if (estim.method == \"nonparam\") {\n                \n                # estimation of the density\n                test <- density(estimphi, from = min(gridf), to = max(gridf), bw = \"ucv\", n = length(gridf))\n                \n                if (test$bw < 0.1) {\n                  estimf <- density(estimphi, from = min(gridf), to = max(gridf), n = length(gridf))$y\n                }\n                if (test$bw >= 0.1) {\n                  estimf <- test$y\n                }\n                \n                if (random == 2 & fixed == 0 & model == \"OU\") {\n                  # troncation of the phi estimators\n                  \n                  kap <- 0.2\n                  cutoff <- V * (1/sigma2) > kap * sqrt(Tend)\n                  estimphi_trunc <- A * cutoff\n                  \n                  if (sum(cutoff) < 0.25 * Mindex) {\n                    print(\"warning: more than 75 percents of the estimated values of the random effect have been put to zero\")\n                  }\n                  \n                  test2 <- density(estimphi_trunc, from = min(gridf), bw = \"ucv\", to = max(gridf), n = length(gridf))\n                  \n                  if (test2$bw < 0.1) {\n                    estimf_trunc <- density(estimphi_trunc, from = min(gridf), to = max(gridf), n = length(gridf))$y\n                    estimf_trunc <- matrix(estimf_trunc, 1, length(estimf_trunc), byrow = TRUE)\n                    estimphi_trunc <- as.matrix(estimphi_trunc, 1, length(estimphi_trunc), byrow = TRUE)\n                  }\n                  if (test2$bw >= 0.1) {\n                    estimf_trunc <- test2$y\n                    estimf_trunc <- matrix(estimf_trunc, 1, length(estimf_trunc), byrow = TRUE)\n                    estimphi_trunc <- matrix(estimphi_trunc, 1, length(estimphi_trunc), byrow = TRUE)\n                  }\n                  \n                } else {\n                  \n                  estimf_trunc <- matrix(estimf, 1, length(estimf), byrow = TRUE)\n                  estimphi_trunc <- matrix(estimphi, 1, length(estimphi), byrow = TRUE)\n                  cutoff <- FALSE\n                }\n                gridf <- matrix(gridf, 1, length(gridf), byrow = TRUE)\n                estimf <- matrix(estimf, 1, length(estimf), byrow = TRUE)\n                estimphi <- matrix(estimphi, 1, length(estimphi), byrow = TRUE)\n                \n                bic <- 0\n                aic <- 0\n                mu <- 0\n                omega <- 0\n            }\n            \n        }\n        return(new(Class = \"Freq.fit\", gridf = gridf, mu = mu, omega = omega, cutoff = cutoff, sigma2 = sigma2, estimf_trunc = estimf_trunc, estimphi_trunc = estimphi_trunc, \n            estimf = estimf, estimphi = estimphi, index = index, bic = bic, aic = aic))\n        \n    }\n}\n\n\n#' S4 class for the frequentist estimation results\nsetClass(Class = \"Freq.fit\", representation = representation(gridf = \"matrix\", mu = \"numeric\", omega = \"numeric\", cutoff = \"logical\", sigma2 = \"numeric\", estimf_trunc = \"matrix\", \n    estimphi_trunc = \"matrix\", index = \"numeric\", estimphi = \"matrix\", estimf = \"matrix\", bic = \"numeric\", aic = \"numeric\"))\n\n#' S4 class for the Bayesian estimation results\n#' @slot sigma2 vector of posterior samples for \\eqn{\\sigma^2}\n#' @slot mu matrix of posterior samples for \\eqn{\\mu}\n#' @slot omega matrix of posterior samples for \\eqn{\\omega}\n#' @slot alpha matrix of posterior samples for \\eqn{\\alpha}\n#' @slot beta matrix of posterior samples for \\eqn{\\beta}\n#' @slot random 1, 2, or c(1,2)\n#' @slot burnIn proposal for the burn-in phase\n#' @slot thinning proposal for the thinning rate\n#' @slot model 'OU' or 'CIR'\n#' @slot prior list of prior values, input variable or calculated by the first 10\\% of series\n#' @slot times vector of observation times, storage of input variable\n#' @slot Xdata matrix of observations, storage of input variable\n#' @slot ind.4.prior indices of series usaged for the prior parameter calculation, if prior knowledge is availabe, M+1\n#' \nsetClass(Class = \"Bayes.fit\", representation = representation(sigma2 = \"numeric\", mu = \"matrix\", omega = \"matrix\", alpha = \"matrix\", beta = \"matrix\", random = \"numeric\", \n    burnIn = \"numeric\", thinning = \"numeric\", model = \"character\", prior = \"list\", times = \"numeric\", Xdata = \"matrix\", ind.4.prior = \"numeric\"))\n\n#' S4 class for the Bayesian prediction results\n#' @slot phi.pred matrix of predictive samples for the random effect\n#' @slot Xpred matrix of predictive samples for observations\n#' @slot coverage.rate amount of covering prediction intervals\n#' @slot qu.u upper prediction interval bound\n#' @slot qu.l lower prediction interval bound\n#' @slot estim list of Bayes.fit object entries\nsetClass(Class = \"Bayes.pred\", representation = representation(phi.pred = \"matrix\", Xpred = \"matrix\", coverage.rate = \"numeric\", qu.u = \"numeric\", qu.l = \"numeric\", \n    estim = \"list\"))\n\n\n########################################################### OUTPUTS\n#' Transfers the class object to a list\n#' \n#' @description Method for the S4 classes\n#' @param x Freq.fit, Bayes.fit or Bayes.pred class\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetGeneric(\"out\", function(x) {\n    standardGeneric(\"out\")\n})\n\n######## \n#' Transfers the class object Freq.fit to a list\n#' \n#' @description Method for the S4 class Freq.fit\n#' @param x Freq.fit class\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"out\", signature = \"Freq.fit\", definition = function(x) {\n    \n    return(list(gridf = x@gridf, mu = x@mu, omega = x@omega, cutoff = x@cutoff, sigma2 = x@sigma2, estimf_trunc = x@estimf_trunc, estimphi_trunc = x@estimphi_trunc, \n        estimf = x@estimf, estimphi = x@estimphi, index = x@index, bic = x@bic, aic = x@aic))\n})\n######## \n#' Transfers the class object Bayes.fit to a list\n#' \n#' @description Method for the S4 class Bayes.fit\n#' @param x Bayes.fit class\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#'\nsetMethod(f = \"out\", signature = \"Bayes.fit\", definition = function(x) {\n    list(sigma2 = x@sigma2, mu = x@mu, omega = x@omega, alpha = x@alpha, beta = x@beta, random = x@random, model = x@model, prior = x@prior, burnIn = x@burnIn, thinning = x@thinning, \n        times = x@times, Xdata = x@Xdata, ind.4.prior = x@ind.4.prior)\n})\n######## \n#' Transfers the class object Bayes.pred to a list\n#' \n#' @description Method for the S4 class Bayes.pred\n#' @param x Bayes.pred class\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#'\nsetMethod(f = \"out\", signature = \"Bayes.pred\", definition = function(x) {\n    list(phi.pred = x@phi.pred, Xpred = x@Xpred, qu.u = x@qu.u, qu.l = x@qu.l, coverage.rate = x@coverage.rate, estim = x@estim)\n})\n\n\n############################################################### SUMMARY\n\n#' Short summary of the results of class object Freq.fit\n#' @description Method for the S4 class Freq.fit\n#' @param object Freq.fit class\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#'\nsetMethod(\"summary\", \"Freq.fit\", function(object) {\n    if (object@bic != 0) {\n        \n        if (dim(object@gridf)[1] == 1) {\n            print(matrix(c(\"BIC\", object@bic, \"AIC\", object@aic), 2, 2, byrow = TRUE))\n            print(matrix(c(\"kurtosis\", kurtosis(object@estimphi[1, ]), \"skewness\", skewness(object@estimphi[1, ])), 2, 2, byrow = TRUE))\n            print(matrix(c(\"sigma\", sqrt(object@sigma2), \"empiric mean\", mean(object@estimphi[1, ]), \"MLE mean\", object@mu, \"empiric sd\", sd(object@estimphi[1, ]), \"MLE sd\", \n                object@omega), 5, 2, byrow = TRUE))\n            \n        }\n        \n        if (dim(object@gridf)[1] == 2) {\n            print(matrix(c(\"BIC\", object@bic, \"AIC\", object@aic), 2, 2, byrow = TRUE))\n            print(matrix(c(\"sigma\", sqrt(object@sigma2)), 1, 2, byrow = TRUE))\n            print(matrix(c(\"empiric mean 1\", mean(object@estimphi[1, ]), \"MLE mean 1\", object@mu[1], \"empiric sd 1\", sd(object@estimphi[1, ]), \"MLE sd 1\", object@omega[1], \n                \"kurtosis 1\", kurtosis(object@estimphi[1, ]), \"skewness 1\", skewness(object@estimphi[1, ])), 6, 2, byrow = TRUE))\n            print(matrix(c(\"empiric mean 2\", mean(object@estimphi[2, ]), \"MLE mean 2\", object@mu[2], \"empiric sd 2\", sd(object@estimphi[2, ]), \"MLE sd 2\", object@omega[2], \n                \"kurtosis 2\", kurtosis(object@estimphi[2, ]), \"skewness 2\", skewness(object@estimphi[2, ])), 6, 2, byrow = TRUE))\n            \n        }\n    }\n    \n    if (object@bic == 0) {\n        \n        if (dim(object@gridf)[1] == 1) {\n            \n            if (sum(object@cutoff) != 0) {\n                print(matrix(c(\"kurtosis\", kurtosis(object@estimphi[1, ]), \"skewness\", skewness(object@estimphi[1])), 2, 2, byrow = TRUE))\n                print(matrix(c(\"sigma\", sqrt(object@sigma2), \"number of truncated values\", length(object@cutoff) - sum(object@cutoff), \"empiric mean\", mean(object@estimphi[1, \n                  ]), \"empiric sd\", sd(object@estimphi[1, ])), 4, 2, byrow = TRUE))\n            }\n            if (sum(object@cutoff) == 0) {\n                print(matrix(c(\"kurtosis\", kurtosis(object@estimphi[1, ]), \"skewness\", skewness(object@estimphi[1, ])), 2, 2, byrow = TRUE))\n                print(matrix(c(\"sigma\", sqrt(object@sigma2), \"empiric mean\", mean(object@estimphi), \"empiric sd\", sd(object@estimphi)), 3, 2, byrow = TRUE))\n            }\n        }\n        \n        if (dim(object@gridf)[1] == 2) {\n            if (sum(object@cutoff) != 0) {\n                print(matrix(c(\"sigma\", sqrt(object@sigma2), \"number of truncated values\", length(object@cutoff) - sum(object@cutoff)), 2, 2, byrow = TRUE))\n                print(matrix(c(\"empiric mean 1\", mean(object@estimphi[1, ]), \"empiric sd 1\", sd(object@estimphi[1, ]), \"kurtosis 1\", kurtosis(object@estimphi[1, ]), \n                  \"skewness 1\", skewness(object@estimphi[1, ])), 4, 2, byrow = TRUE))\n                print(matrix(c(\"empiric mean 2\", mean(object@estimphi[2, ]), \"empiric sd 2\", sd(object@estimphi[2, ]), \"kurtosis 2\", kurtosis(object@estimphi[2, ]), \n                  \"skewness 2\", skewness(object@estimphi[2, ])), 4, 2, byrow = TRUE))\n                \n            }\n            if (sum(object@cutoff) == 0) {\n                print(matrix(c(\"sigma\", sqrt(object@sigma2)), 1, 2, byrow = TRUE))\n                print(matrix(c(\"empiric mean 1\", mean(object@estimphi[1, ]), \"empiric sd 1\", sd(object@estimphi[1, ]), \"kurtosis 1\", kurtosis(object@estimphi[1, ]), \n                  \"skewness 1\", skewness(object@estimphi[1, ])), 4, 2, byrow = TRUE))\n                print(matrix(c(\"empiric mean 2\", mean(object@estimphi[2, ]), \"empiric sd 2\", sd(object@estimphi[2, ]), \"kurtosis 2\", kurtosis(object@estimphi[1, ]), \"skewness 2\", \n                  skewness(object@estimphi[2, ])), 4, 2, byrow = TRUE))\n            }\n        }\n    }\n    \n})\n\n#' Short summary of the results of class object Bayes.fit\n#' @description Method for the S4 class Bayes.fit\n#' @param object Bayes.fit class\n#' @param level default 0.05\n#' @param burnIn optional\n#' @param thinning optional\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#'\nsetMethod(\"summary\", signature = \"Bayes.fit\", definition = function(object, level = 0.05, burnIn, thinning) {\n    if (missing(burnIn)) \n        burnIn <- object@burnIn\n    if (missing(thinning)) \n        thinning <- object@thinning\n    ind.samples <- seq(burnIn + 1, length(object@sigma2), by = thinning)\n    if (length(object@random) == 2) {\n        out <- list(sigma2.mean = mean(object@sigma2[ind.samples]), sigma2.cred_int = quantile(object@sigma2[ind.samples], c(level/2, 1 - level/2)), mu.mean = apply(object@mu[ind.samples, \n            ], 2, mean), mu.cred_int = apply(object@mu[ind.samples, ], 2, quantile, c(level/2, 1 - level/2)), omega.mean = apply(object@omega[ind.samples, ], 2, mean), omega.cred_int = apply(object@omega[ind.samples, \n            ], 2, quantile, c(level/2, 1 - level/2)), alpha.mean = apply(object@alpha[ind.samples, ], 2, mean), alpha.cred_int = apply(object@alpha[ind.samples, ], 2, quantile, \n            c(level/2, 1 - level/2)), beta.mean = apply(object@beta[ind.samples, ], 2, mean), beta.cred_int = apply(object@beta[ind.samples, ], 2, quantile, c(level/2, 1 - level/2)))\n    } else {\n        if (object@random == 1) {\n            out <- list(sigma2.mean = mean(object@sigma2[ind.samples]), sigma2.cred_int = quantile(object@sigma2[ind.samples], c(level/2, 1 - level/2)), mu.mean = mean(object@mu[ind.samples]), \n                mu.cred_int = quantile(object@mu[ind.samples], c(level/2, 1 - level/2)), omega.mean = mean(object@omega[ind.samples]), omega.cred_int = quantile(object@omega[ind.samples], \n                  c(level/2, 1 - level/2)), alpha.mean = apply(object@alpha[ind.samples, ], 2, mean), alpha.cred_int = apply(object@alpha[ind.samples, ], 2, quantile, c(level/2, \n                  1 - level/2)), beta.mean = mean(object@beta[ind.samples]), beta.cred_int = quantile(object@beta[ind.samples], c(level/2, 1 - level/2)))\n        } else {\n            out <- list(sigma2.mean = mean(object@sigma2[ind.samples]), sigma2.cred_int = quantile(object@sigma2[ind.samples], c(level/2, 1 - level/2)), mu.mean = mean(object@mu[ind.samples]), \n                mu.cred_int = quantile(object@mu[ind.samples], c(level/2, 1 - level/2)), omega.mean = mean(object@omega[ind.samples]), omega.cred_int = quantile(object@omega[ind.samples], \n                  c(level/2, 1 - level/2)), alpha.mean = mean(object@alpha[ind.samples]), alpha.cred_int = quantile(object@alpha[ind.samples], c(level/2, 1 - level/2)), beta.mean = apply(object@beta[ind.samples, \n                  ], 2, mean), beta.cred_int = apply(object@beta[ind.samples, ], 2, quantile, c(level/2, 1 - level/2)))\n        }\n    }\n    return(out)\n})\n\n\n########################################################### PRINT\n\n#' Description of print\n#' @description Method for the S4 class Freq.fit\n#' @param x Freq.fit class\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#'\nsetMethod(\"print\", \"Freq.fit\", function(x) {\n    if (x@bic != 0) {\n        \n        print(c(\"number of used trajectories\", length(x@index)))\n    }\n    \n    if (x@bic == 0) {\n        \n        if (sum(x@cutoff) != 0) {\n            print(matrix(c(\"number of used trajectories\", length(x@index), \"number of truncated values\", length(x@cutoff) - sum(x@cutoff)), 2, 2, byrow = TRUE))\n        }\n        if (sum(x@cutoff) == 0) {\n            print(c(\"number of used trajectories\", length(x@index)))\n        }\n    }\n})\n\n\n#' Print of acceptance rates of the MH steps\n#' @description Method for the S4 class Bayes.fit\n#' @param x Bayes.fit class\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#'\nsetMethod(\"print\", \"Bayes.fit\", function(x) {\n    if (length(x@random) == 2) {\n        print(\"acceptance rate for phi:\")\n        print(summary(t(sapply(1:ncol(x@alpha), function(i) c(length(unique(x@alpha[, i])), length(unique(x@beta[, i])))/nrow(x@alpha)))))\n        \n    } else {\n        if (x@random == 1) {\n            print(\"acceptance rates for random effect:\")\n            print(summary(apply(x@alpha, 2, function(vec) length(unique(vec))/length(vec))))\n            print(c(\"acceptance rate for fixed effect:\", length(unique(x@beta))/length(x@beta)))\n        }\n        if (x@random == 2) {\n            print(\"acceptance rates for random effect:\")\n            print(summary(apply(x@beta, 2, function(vec) length(unique(vec))/length(vec))))\n            print(c(\"acceptance rate for fixed effect:\", length(unique(x@alpha))/length(x@alpha)))\n        }\n    }\n    if (x@model == \"CIR\") \n        print(c(\"acceptance rate for sigma:\", length(unique(x@sigma2))/length(x@sigma2)))\n    \n})\n\n########################################################### PLOT\n#' Plot method for the frequentist estimation class object\n#' \n#' @description Plot method for the S4 class Freq.fit\n#' @param x Freq.fit class\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \n\nsetMethod(f = \"plot\", signature = \"Freq.fit\", definition = function(x, newwindow = FALSE, ...) {\n    if (newwindow) {\n        x11(width = 14)\n    }\n    \n    \n    if (dim(x@gridf)[1] == 1) {\n        \n        op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n        hist(x@estimphi, main = \"Density of the random effect\", freq = FALSE, xlab = \"\", ylab = \"\", xlim = c(min(x@estimphi) * 0.8, max(x@estimphi) * 1.2), ylim = c(0, \n            max(x@estimf) * 1.5), breaks = 12)\n        lines(x@gridf, x@estimf, col = \"red\")\n        \n        if (sum(x@estimf_trunc) != 0 & sum(x@estimf_trunc == x@estimf) != length(x@gridf)) {\n            lines(x@gridf, x@estimf_trunc, col = \"red\", lty = 2)\n        }\n        \n        if (x@bic == 0) {\n            qqplot(x@estimphi, rnorm(length(x@estimphi), mean(x@estimphi), sd(x@estimphi)), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", pch = 18, xlim = c(min(x@estimphi) * \n                0.8, max(x@estimphi) * 1.2), ylim = c(min(x@estimphi) * 0.8, max(x@estimphi) * 1.2), cex.lab = 1.1)\n            abline(0, 1)\n        }\n        if (x@bic != 0) {\n            qqplot(x@estimphi, rnorm(length(x@estimphi), x@mu, x@omega), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", pch = 18, xlim = c(min(x@estimphi) * 0.8, \n                max(x@estimphi) * 1.2), ylim = c(min(x@estimphi) * 0.8, max(x@estimphi) * 1.2), cex.lab = 1.1)\n            abline(0, 1)\n        }\n        \n    }\n    \n    if (dim(x@gridf)[1] == 2) {\n        \n        if (sum(x@estimf_trunc) != 0 & sum(x@estimf_trunc == x@estimf) != length(x@gridf[1, ])^2) {\n            op <- par(mfrow = c(2, 4), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n            \n            persp3D(x@gridf[1, ], x@gridf[2, ], x@estimf, main = \"Estimation of the density\", theta = 45, phi = 25, expand = 0.75, colkey = FALSE, bty = \"b2\")\n            persp3D(x@gridf[1, ], x@gridf[2, ], x@estimf_trunc, main = \"Estimation of the density with cutoff\", theta = 45, phi = 25, expand = 0.75, colkey = FALSE, \n                bty = \"b2\")\n            \n            gridf1 <- x@gridf[1, ]\n            gridf2 <- x@gridf[2, ]\n            marg1 <- ((max(gridf2) - min(gridf2))/length(gridf2)) * apply(x@estimf, 1, sum)\n            marg2 <- ((max(gridf1) - min(gridf1))/length(gridf1)) * apply(x@estimf, 2, sum)\n            \n            hist(x@estimphi[1, ], main = \"Density of the first random effect\", freq = FALSE, xlab = \"\", ylab = \"\", xlim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, \n                ]) * 1.2), ylim = c(0, max(marg1) * 1.5), breaks = 12)\n            lines(gridf1, marg1, col = \"red\")\n            if (sum(x@estimf_trunc) != 0 & sum(x@estimf_trunc == x@estimf) != length(gridf1)^2) {\n                marg1_trunc <- ((max(gridf2) - min(gridf2))/length(gridf2)) * apply(x@estimf_trunc, 1, sum)\n                lines(gridf1, marg1_trunc, col = \"red\", lty = 2)\n            }\n            \n            hist(x@estimphi[2, ], main = \"Density of the second random effect\", freq = FALSE, xlab = \"\", ylab = \"\", xlim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, \n                ]) * 1.2), ylim = c(0, max(marg2) * 1.5), breaks = 12)\n            lines(gridf2, marg2, col = \"red\")\n            if (sum(x@estimf_trunc) != 0 & sum(x@estimf_trunc == x@estimf) != length(gridf1)^2) {\n                marg2_trunc <- ((max(gridf1) - min(gridf1))/length(gridf1)) * apply(x@estimf_trunc, 2, sum)\n                lines(gridf2, marg2_trunc, col = \"red\", lty = 2)\n            }\n            \n            \n            if (x@bic == 0) {\n                \n                qqplot(x@estimphi[1, ], rnorm(length(x@estimphi[1, ]), mean(x@estimphi[1, ]), sd(x@estimphi[1, ])), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", \n                  pch = 18, xlim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, ]) * 1.2), ylim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, ]) * 1.2), cex.lab = 1.1)\n                abline(0, 1)\n                qqplot(x@estimphi[2, ], rnorm(length(x@estimphi[2, ]), mean(x@estimphi[2, ]), sd(x@estimphi[2, ])), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", \n                  pch = 18, xlim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, ]) * 1.2), ylim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, ])) * 1.2, cex.lab = 1.1)\n                abline(0, 1)\n            }\n            \n            if (x@bic != 0) {\n                \n                qqplot(x@estimphi[1, ], rnorm(length(x@estimphi[1, ]), x@mu[1], x@omega[1]), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", pch = 18, xlim = c(min(x@estimphi[1, \n                  ]) * 0.8, max(x@estimphi[1, ]) * 1.2), ylim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, ])) * 1.2, cex.lab = 1.1)\n                abline(0, 1)\n                \n                qqplot(x@estimphi[2, ], rnorm(length(x@estimphi[2, ]), x@mu[2], x@omega[2]), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", pch = 18, xlim = c(min(x@estimphi[2, \n                  ]) * 0.8, max(x@estimphi[2, ]) * 1.2), ylim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, ])) * 1.2, cex.lab = 1.1)\n                abline(0, 1)\n            }\n        } else {\n            \n            op <- par(mfrow = c(2, 3), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n            \n            persp3D(x@gridf[1, ], x@gridf[2, ], x@estimf, main = \"Estimation of the density\", theta = 45, phi = 25, expand = 0.75, colkey = FALSE, bty = \"b2\")\n            gridf1 <- x@gridf[1, ]\n            gridf2 <- x@gridf[2, ]\n            marg1 <- ((max(gridf2) - min(gridf2))/length(gridf2)) * apply(x@estimf, 1, sum)\n            marg2 <- ((max(gridf1) - min(gridf1))/length(gridf1)) * apply(x@estimf, 2, sum)\n            \n            hist(x@estimphi[1, ], main = \"Density of the first random effect\", freq = FALSE, xlab = \"\", ylab = \"\", xlim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, \n                ]) * 1.2), ylim = c(0, max(marg1) * 1.5), breaks = 12)\n            lines(gridf1, marg1, col = \"red\")\n            if (sum(x@estimf_trunc) != 0 & sum(x@estimf_trunc == x@estimf) != length(gridf1)^2) {\n                marg1_trunc <- ((max(gridf2) - min(gridf2))/length(gridf2)) * apply(x@estimf_trunc, 1, sum)\n                lines(gridf1, marg1_trunc, col = \"red\", lty = 2)\n            }\n            \n            hist(x@estimphi[2, ], main = \"Density of the second random effect\", freq = FALSE, xlab = \"\", ylab = \"\", xlim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, \n                ]) * 1.2), ylim = c(0, max(marg2) * 1.5), breaks = 12)\n            lines(gridf2, marg2, col = \"red\")\n            if (sum(x@estimf_trunc) != 0 & sum(x@estimf_trunc == x@estimf) != length(gridf1)^2) {\n                marg2_trunc <- ((max(gridf1) - min(gridf1))/length(gridf1)) * apply(x@estimf_trunc, 2, sum)\n                lines(gridf2, marg2_trunc, col = \"red\", lty = 2)\n            }\n            \n            \n            if (x@bic == 0) {\n                \n                qqplot(x@estimphi[1, ], rnorm(length(x@estimphi[1, ]), mean(x@estimphi[1, ]), sd(x@estimphi[1, ])), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", \n                  pch = 18, xlim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, ]) * 1.2), ylim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, ]) * 1.2), cex.lab = 1.1)\n                abline(0, 1)\n                qqplot(x@estimphi[2, ], rnorm(length(x@estimphi[2, ]), mean(x@estimphi[2, ]), sd(x@estimphi[2, ])), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", \n                  pch = 18, xlim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, ]) * 1.2), ylim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, ])) * 1.2, cex.lab = 1.1)\n                abline(0, 1)\n            }\n            \n            if (x@bic != 0) {\n                \n                qqplot(x@estimphi[1, ], rnorm(length(x@estimphi[1, ]), x@mu[1], x@omega[1]), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", pch = 18, xlim = c(min(x@estimphi[1, \n                  ]) * 0.8, max(x@estimphi[1, ]) * 1.2), ylim = c(min(x@estimphi[1, ]) * 0.8, max(x@estimphi[1, ])) * 1.2, cex.lab = 1.1)\n                abline(0, 1)\n                \n                qqplot(x@estimphi[2, ], rnorm(length(x@estimphi[2, ]), x@mu[2], x@omega[2]), xlab = \"Normal Quantiles\", ylab = \"Sample Quantiles\", pch = 18, xlim = c(min(x@estimphi[2, \n                  ]) * 0.8, max(x@estimphi[2, ]) * 1.2), ylim = c(min(x@estimphi[2, ]) * 0.8, max(x@estimphi[2, ])) * 1.2, cex.lab = 1.1)\n                abline(0, 1)\n            }\n        }\n        \n    }\n    \n    \n})\n\n######## \n#' Plot method for the Bayesian estimation class object\n#' \n#' @description Plot method for the S4 class Bayes.fit\n#' @param x Bayes.fit class\n#' @param plot.priorMean logical(1), if TRUE, prior means are added to the plots\n#' @param reduced logical(1), if TRUE, the chains are reduced with the burn-in and thin rate\n#' @param style one out of \"chains\", \"acf\", \"density\" or \"cred.int\"\n#' @param level alpha for the credibility intervals, only for style \"cred.int\", default = 0.05\n#' @param true.phi only for style \"cred.int\", for the case of known true values, e.g. for simulation\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"plot\", signature = \"Bayes.fit\", definition = function(x, plot.priorMean = FALSE, reduced = FALSE, style = c(\"chains\", \"acf\", \"density\", \"cred.int\"), level = 0.05, \n    true.phi, newwindow = FALSE, ...) {\n    if (newwindow) {\n        x11(width = 10)\n    }\n    original.settings <- par(no.readonly = TRUE)\n    style <- match.arg(style)\n    ind <- 1:length(x@sigma2)\n    if (reduced) \n        ind <- seq(x@burnIn + 1, length(x@sigma2), by = x@thinning)\n    \n    if (length(x@random) == 2) {\n        op <- par(mfrow = c(3, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.9, cex.lab = 0.8, cex.axis = 0.8)\n        \n        if (style == \"chains\") {\n            if (plot.priorMean) {\n                \n                # layout(matrix(c(1,2,3,4,5,6), ncol=2, byrow=TRUE), heights=c(4, 1, 4))\n                \n                plot(x@mu[ind, 1], ylim = range(c(x@mu[ind, 1], x@prior$m[1])), main = \"Markov Chain\", ylab = expression(mu[1]), type = \"l\")\n                abline(h = x@prior$m[1], col = 2)  #if parametrisation of the package\n                \n                plot(x@mu[ind, 2], ylim = range(c(x@mu[ind, 2], x@prior$m[2])), main = \"Markov Chain\", ylab = expression(mu[2]), type = \"l\")\n                abline(h = x@prior$m[2], col = 2)\n                \n                plot(x@omega[ind, 1], ylim = range(c(x@prior$beta.omega[1]/(x@prior$alpha.omega[1] - 1), x@omega[ind, 1])), main = \"Markov Chain\", ylab = expression(omega[1]^2), \n                  type = \"l\")\n                abline(h = x@prior$beta.omega[1]/(x@prior$alpha.omega[1] - 1), col = 2)\n                \n                plot(x@omega[ind, 2], ylim = range(c(x@prior$beta.omega[2]/(x@prior$alpha.omega[2] - 1), x@omega[ind, 2])), main = \"Markov Chain\", ylab = expression(omega[2]^2), \n                  type = \"l\")\n                abline(h = x@prior$beta.omega[2]/(x@prior$alpha.omega[2] - 1), col = 2)\n                \n                plot(x@sigma2[ind], ylim = range(c(x@sigma2[ind], x@prior$beta.sigma/(x@prior$alpha.sigma - 1))), main = \"Markov Chain\", ylab = expression(sigma^2), \n                  type = \"l\")\n                abline(h = x@prior$beta.sigma/(x@prior$alpha.sigma - 1), col = 2)\n                \n                par(mai = c(0, 0, 0, 0))\n                plot.new()\n                legend(x = \"center\", legend = \"prior mean\", col = 2, lty = 1)\n                \n                \n            } else {\n                plot(x@mu[ind, 1], main = \"Markov Chain\", ylab = expression(mu[1]), type = \"l\")\n                plot(x@mu[ind, 2], main = \"Markov Chain\", ylab = expression(mu[2]), type = \"l\")\n                plot(x@omega[ind, 1], main = \"Markov Chain\", ylab = expression(omega[1]^2), type = \"l\")\n                plot(x@omega[ind, 2], main = \"Markov Chain\", ylab = expression(omega[2]^2), type = \"l\")\n                plot(x@sigma2[ind], main = \"Markov Chain\", ylab = expression(sigma^2), type = \"l\")\n                \n            }\n            \n        }\n        if (style == \"acf\") {\n            he <- acf(x@mu[ind, 1], plot = FALSE)\n            plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ mu[1]), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n            he <- acf(x@mu[ind, 2], plot = FALSE)\n            plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ mu[2]), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n            he <- acf(x@omega[ind, 1], plot = FALSE)\n            plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ omega[1]^2), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n            he <- acf(x@omega[ind, 2], plot = FALSE)\n            plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ omega[2]^2), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n            he <- acf(x@sigma2[ind], plot = FALSE)\n            plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ sigma^2), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n            \n        }\n        if (style == \"density\") {\n            if (plot.priorMean) {\n                \n                plot(density(x@mu[ind, 1]), xlim = range(c(x@mu[ind, 1], x@prior$m[1])), main = expression(\"Posterior of \" ~ mu[1]), xlab = expression(mu[1]))\n                abline(v = x@prior$m[1], col = 2)\n                \n                plot(density(x@mu[ind, 2]), xlim = range(c(x@mu[ind, 2], x@prior$m[2])), main = expression(\"Posterior of \" ~ mu[2]), xlab = expression(mu[2]))\n                abline(v = x@prior$m[2], col = 2)\n                \n                plot(density(x@omega[ind, 1]), xlim = range(c(x@omega[ind, 1], x@prior$beta.omega[1]/(x@prior$alpha.omega[1] - 1))), main = expression(\"Posterior of \" ~ \n                  omega[1]^2), xlab = expression(omega[1]^2))\n                abline(v = x@prior$beta.omega[1]/(x@prior$alpha.omega[1] - 1), col = 2)\n                \n                plot(density(x@omega[ind, 2]), xlim = range(c(x@omega[ind, 2], x@prior$beta.omega[2]/(x@prior$alpha.omega[2] - 1))), main = expression(\"Posterior of \" ~ \n                  omega[2]^2), xlab = expression(omega[2]^2))\n                abline(v = x@prior$beta.omega[2]/(x@prior$alpha.omega[2] - 1), col = 2)\n                \n                plot(density(x@sigma2[ind]), xlim = range(c(x@sigma2[ind], x@prior$beta.sigma/(x@prior$alpha.sigma - 1))), main = expression(\"Posterior of \" ~ sigma^2), \n                  xlab = expression(sigma^2))\n                abline(v = x@prior$beta.sigma/(x@prior$alpha.sigma - 1), col = 2)\n                \n                par(mai = c(0, 0, 0, 0))\n                plot.new()\n                legend(x = \"center\", legend = \"prior mean\", col = 2, lty = 1)\n                \n                \n            } else {\n                plot(density(x@mu[ind, 1]), main = expression(\"Posterior of \" ~ mu[1]), xlab = expression(mu[1]))\n                \n                plot(density(x@mu[ind, 2]), main = expression(\"Posterior of \" ~ mu[2]), xlab = expression(mu[2]))\n                \n                plot(density(x@omega[ind, 1]), main = expression(\"Posterior of \" ~ omega[1]^2), xlab = expression(omega[1]^2))\n                \n                plot(density(x@omega[ind, 2]), main = expression(\"Posterior of \" ~ omega[2]^2), xlab = expression(omega[2]^2))\n                \n                plot(density(x@sigma2[ind]), main = expression(\"Posterior of \" ~ sigma^2), xlab = expression(sigma^2))\n                \n            }\n            \n            \n            \n        }\n        if (style == \"cred.int\") {\n            layout(matrix(c(1, 2, 3)), heights = c(4, 4, 1))\n            \n            par(mai = rep(0.5, 4))\n            \n            alpha.mean <- apply(x@alpha[ind, ], 2, mean)\n            alpha.cred_int <- apply(x@alpha[ind, ], 2, quantile, c(level/2, 1 - level/2))\n            \n            \n            if (!missing(true.phi)) {\n                ra.plot <- range(c(range(alpha.cred_int), true.phi[1, -x@ind.4.prior]))\n            } else {\n                ra.plot <- range(alpha.cred_int)\n            }\n            plot(alpha.mean, ylim = ra.plot, ylab = expression(alpha), main = \"credibility intervals\", pch = 20)\n            segments(1:length(alpha.mean), alpha.cred_int[1, ], 1:length(alpha.mean), alpha.cred_int[2, ])\n            segments(1:length(alpha.mean) - 0.2, alpha.cred_int[1, ], 1:length(alpha.mean) + 0.2, alpha.cred_int[1, ])\n            segments(1:length(alpha.mean) - 0.2, alpha.cred_int[2, ], 1:length(alpha.mean) + 0.2, alpha.cred_int[2, ])\n            \n            if (!missing(true.phi)) \n                points(true.phi[1, -x@ind.4.prior], col = 2, pch = 20)\n            \n            beta.mean <- apply(x@beta[ind, ], 2, mean)\n            beta.cred_int <- apply(x@beta[ind, ], 2, quantile, c(level/2, 1 - level/2))\n            \n            if (!missing(true.phi)) {\n                ra.plot <- range(c(range(beta.cred_int), true.phi[2, -x@ind.4.prior]))\n            } else {\n                ra.plot <- range(beta.cred_int)\n            }\n            plot(beta.mean, ylim = ra.plot, ylab = expression(beta), main = \"credibility intervals\", pch = 20)\n            segments(1:length(beta.mean), beta.cred_int[1, ], 1:length(beta.mean), beta.cred_int[2, ])\n            segments(1:length(beta.mean) - 0.2, beta.cred_int[1, ], 1:length(beta.mean) + 0.2, beta.cred_int[1, ])\n            segments(1:length(beta.mean) - 0.2, beta.cred_int[2, ], 1:length(beta.mean) + 0.2, beta.cred_int[2, ])\n            \n            if (!missing(true.phi)) \n                points(true.phi[2, -x@ind.4.prior], col = 2, pch = 20)\n            \n            \n            par(mai = c(0, 0, 0, 0))\n            plot.new()\n            if (!missing(true.phi)) {\n                legend(x = \"center\", legend = c(\"credibility interval\", \"posterior mean\", \"true values\"), col = c(1, 1, 2), lty = c(1, -1, -1), pch = c(-1, 20, 20), \n                  cex = 0.8, horiz = TRUE)\n                \n            } else {\n                legend(x = \"center\", legend = c(\"credibility interval\", \"posterior mean\"), lty = c(1, -1), pch = c(-1, 20), horiz = TRUE)\n            }\n            \n        }\n    } else {\n        if (x@random == 1) {\n            op <- par(mfrow = c(2, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n            if (style == \"chains\") {\n                if (plot.priorMean) {\n                  \n                  layout(matrix(c(1, 2, 3, 4, 5, 5), ncol = 2, byrow = TRUE), heights = c(4, 4, 1))\n                  \n                  par(mai = rep(0.5, 4))\n                  plot(x@mu[ind], ylim = range(c(x@mu[ind], x@prior$m[1])), main = \"Markov Chain\", ylab = expression(mu[1]), type = \"l\")\n                  abline(h = x@prior$m[1], col = 2)  #if parametrisation of the package\n                  \n                  plot(x@beta[ind], ylim = range(c(x@beta[ind], x@prior$m[2])), main = \"Markov Chain\", ylab = expression(beta), type = \"l\")\n                  abline(h = x@prior$m[2], col = 2)\n                  \n                  plot(x@omega[ind], ylim = range(c(x@prior$beta.omega/(x@prior$alpha.omega - 1), x@omega[ind])), main = \"Markov Chain\", ylab = expression(omega[1]^2), \n                    type = \"l\")\n                  abline(h = x@prior$beta.omega/(x@prior$alpha.omega - 1), col = 2)\n                  \n                  plot(x@sigma2[ind], ylim = range(c(x@sigma2[ind], x@prior$beta.sigma/(x@prior$alpha.sigma - 1))), main = \"Markov Chain\", ylab = expression(sigma^2), \n                    type = \"l\")\n                  abline(h = x@prior$beta.sigma/(x@prior$alpha.sigma - 1), col = 2)\n                  \n                  par(mai = c(0, 0, 0, 0))\n                  plot.new()\n                  legend(x = \"center\", legend = \"prior mean\", col = 2, lty = 1)\n                  \n                } else {\n                  plot(x@mu[ind], main = \"Markov Chain\", ylab = expression(mu[1]), type = \"l\")\n                  plot(x@beta[ind], main = \"Markov Chain\", ylab = expression(beta), type = \"l\")\n                  plot(x@omega[ind], main = \"Markov Chain\", ylab = expression(omega[1]^2), type = \"l\")\n                  plot(x@sigma2[ind], main = \"Markov Chain\", ylab = expression(sigma^2), type = \"l\")\n                  \n                }\n                \n            }\n            if (style == \"acf\") {\n                he <- acf(x@mu[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ mu[1]), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                he <- acf(x@beta[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ beta), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                he <- acf(x@omega[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ omega[1]^2), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                he <- acf(x@sigma2[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ sigma^2), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                \n            }\n            if (style == \"density\") {\n                if (plot.priorMean) {\n                  \n                  layout(matrix(c(1, 2, 3, 4, 5, 5), ncol = 2, byrow = TRUE), heights = c(4, 4, 1))\n                  \n                  par(mai = rep(0.5, 4))\n                  \n                  plot(density(x@mu[ind]), xlim = range(c(x@mu[ind], x@prior$m[1])), main = expression(\"Posterior of \" ~ mu[1]), xlab = expression(mu[1]))\n                  abline(v = x@prior$m[1], col = 2)\n                  \n                  plot(density(x@beta[ind]), xlim = range(c(x@beta[ind], x@prior$m[2])), main = expression(\"Posterior of \" ~ beta), xlab = expression(beta))\n                  abline(v = x@prior$m[2], col = 2)\n                  \n                  plot(density(x@omega[ind]), xlim = range(c(x@omega[ind], x@prior$beta.omega/(x@prior$alpha.omega - 1))), main = expression(\"Posterior of \" ~ omega[1]^2), \n                    xlab = expression(omega[1]^2))\n                  abline(v = x@prior$beta.omega/(x@prior$alpha.omega - 1), col = 2)\n                  \n                  plot(density(x@sigma2[ind]), xlim = range(c(x@sigma2[ind], x@prior$beta.sigma/(x@prior$alpha.sigma - 1))), main = expression(\"Posterior of \" ~ sigma^2), \n                    xlab = expression(sigma^2))\n                  abline(v = x@prior$beta.sigma/(x@prior$alpha.sigma - 1), col = 2)\n                  \n                  par(mai = c(0, 0, 0, 0))\n                  plot.new()\n                  legend(x = \"center\", legend = \"prior mean\", col = 2, lty = 1)\n                  \n                  \n                } else {\n                  plot(density(x@mu[ind]), main = expression(\"Posterior of \" ~ mu[1]), xlab = expression(mu[1]))\n                  \n                  plot(density(x@beta[ind]), main = expression(\"Posterior of \" ~ beta), xlab = expression(beta))\n                  \n                  plot(density(x@omega[ind]), main = expression(\"Posterior of \" ~ omega[1]^2), xlab = expression(omega[1]^2))\n                  \n                  plot(density(x@sigma2[ind]), main = expression(\"Posterior of \" ~ sigma^2), xlab = expression(sigma^2))\n                  \n                }\n                \n                \n                \n            }\n            if (style == \"cred.int\") {\n                layout(matrix(c(1, 2)), heights = c(5, 1))\n                \n                # par(mai=rep(0.5, 4))\n                \n              alpha.mean <- apply(x@alpha[ind, ], 2, mean)\n              alpha.cred_int <- apply(x@alpha[ind, ], 2, quantile, c(level/2, 1 - level/2))\n\n                if (!missing(true.phi)) {\n                  ra.plot <- range(c(range(alpha.cred_int), true.phi[-x@ind.4.prior]))\n                } else {\n                  ra.plot <- range(alpha.cred_int)\n                }\n                plot(alpha.mean, ylim = ra.plot, ylab = expression(alpha), main = \"credibility intervals\", pch = 20)\n                segments(1:length(alpha.mean), alpha.cred_int[1, ], 1:length(alpha.mean), alpha.cred_int[2, ])\n                segments(1:length(alpha.mean) - 0.2, alpha.cred_int[1, ], 1:length(alpha.mean) + 0.2, alpha.cred_int[1, ])\n                segments(1:length(alpha.mean) - 0.2, alpha.cred_int[2, ], 1:length(alpha.mean) + 0.2, alpha.cred_int[2, ])\n                \n                if (!missing(true.phi)) \n                  points(true.phi[-x@ind.4.prior], col = 2, pch = 20)\n                \n                par(mai = c(0, 0, 0, 0))\n                plot.new()\n                if (!missing(true.phi)) {\n                  legend(x = \"center\", legend = c(\"credibility interval\", \"posterior mean\", \"true values\"), col = c(1, 1, 2), lty = c(1, -1, -1), pch = c(-1, 20, 20), \n                    cex = 0.8, horiz = TRUE)\n                  \n                } else {\n                  legend(x = \"center\", legend = c(\"credibility interval\", \"posterior mean\"), lty = c(1, -1), pch = c(-1, 20), horiz = TRUE)\n                }\n                \n            }\n            \n        } else {\n            op <- par(mfrow = c(2, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n            if (style == \"chains\") {\n                if (plot.priorMean) {\n                  \n                  layout(matrix(c(1, 2, 3, 4, 5, 5), ncol = 2, byrow = TRUE), heights = c(4, 4, 1))\n                  \n                  par(mai = rep(0.5, 4))\n                  \n                  plot(x@alpha[ind], ylim = range(c(x@alpha[ind], x@prior$m[1])), main = \"Markov Chain\", ylab = expression(alpha), type = \"l\")\n                  abline(h = x@prior$m[1], col = 2)\n                  \n                  plot(x@mu[ind], ylim = range(c(x@mu[ind], x@prior$m[2])), main = \"Markov Chain\", ylab = expression(mu[2]), type = \"l\")\n                  abline(h = x@prior$m[2], col = 2)\n                  \n                  plot(x@omega[ind], ylim = range(c(x@prior$beta.omega/(x@prior$alpha.omega - 1), x@omega[ind])), main = \"Markov Chain\", ylab = expression(omega[2]^2), \n                    type = \"l\")\n                  abline(h = x@prior$beta.omega/(x@prior$alpha.omega - 1), col = 2)\n                  \n                  plot(x@sigma2[ind], ylim = range(c(x@sigma2[ind], x@prior$beta.sigma/(x@prior$alpha.sigma - 1))), main = \"Markov Chain\", ylab = expression(sigma^2), \n                    type = \"l\")\n                  abline(h = x@prior$beta.sigma/(x@prior$alpha.sigma - 1), col = 2)\n                  \n                  par(mai = c(0, 0, 0, 0))\n                  plot.new()\n                  legend(x = \"center\", legend = \"prior mean\", col = 2, lty = 1)\n                  \n                } else {\n                  plot(x@alpha[ind], main = \"Markov Chain\", ylab = expression(alpha), type = \"l\")\n                  plot(x@mu[ind], main = \"Markov Chain\", ylab = expression(mu[2]), type = \"l\")\n                  plot(x@omega[ind], main = \"Markov Chain\", ylab = expression(omega[2]^2), type = \"l\")\n                  plot(x@sigma2[ind], main = \"Markov Chain\", ylab = expression(sigma^2), type = \"l\")\n                }\n            }\n            if (style == \"acf\") {\n                he <- acf(x@alpha[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ alpha), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                he <- acf(x@mu[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ mu[2]), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                he <- acf(x@omega[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ omega[2]^2), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                he <- acf(x@sigma2[ind], plot = FALSE)\n                plot(he$lag, he$acf, type = \"h\", main = expression(\"Acf of simulations for \" ~ sigma^2), xlab = \"lag\", ylab = \"acf\", ylim = c(0, 1))\n                \n            }\n            if (style == \"density\") {\n                if (plot.priorMean) {\n                  \n                  layout(matrix(c(1, 2, 3, 4, 5, 5), ncol = 2, byrow = TRUE), heights = c(4, 4, 1))\n                  \n                  par(mai = rep(0.5, 4))\n                  \n                  plot(density(x@alpha[ind]), xlim = range(c(x@alpha[ind], x@prior$m[1])), main = expression(\"Posterior of \" ~ alpha), xlab = expression(alpha))\n                  abline(v = x@prior$m[1], col = 2)\n                  \n                  plot(density(x@mu[ind]), xlim = range(c(x@mu[ind], x@prior$m[2])), main = expression(\"Posterior of \" ~ mu[2]), xlab = expression(mu[2]))\n                  abline(v = x@prior$m[2], col = 2)\n                  \n                  plot(density(x@omega[ind]), xlim = range(c(x@omega[ind], x@prior$beta.omega/(x@prior$alpha.omega - 1))), main = expression(\"Posterior of \" ~ omega[2]^2), \n                    xlab = expression(omega[2]^2))\n                  abline(v = x@prior$beta.omega/(x@prior$alpha.omega - 1), col = 2)\n                  \n                  plot(density(x@sigma2[ind]), xlim = range(c(x@sigma2[ind], x@prior$beta.sigma/(x@prior$alpha.sigma - 1))), main = expression(\"Posterior of \" ~ sigma^2), \n                    xlab = expression(sigma^2))\n                  abline(v = x@prior$beta.sigma/(x@prior$alpha.sigma - 1), col = 2)\n                  \n                  par(mai = c(0, 0, 0, 0))\n                  plot.new()\n                  legend(x = \"center\", legend = \"prior mean\", col = 2, lty = 1)\n                  \n                } else {\n                  plot(density(x@alpha[ind]), main = expression(\"Posterior of \" ~ alpha), xlab = expression(alpha))\n                  \n                  plot(density(x@mu[ind]), main = expression(\"Posterior of \" ~ mu[2]), xlab = expression(mu[2]))\n                  \n                  plot(density(x@omega[ind]), main = expression(\"Posterior of \" ~ omega[2]^2), xlab = expression(omega[2]^2))\n                  \n                  plot(density(x@sigma2[ind]), main = expression(\"Posterior of \" ~ sigma^2), xlab = expression(sigma^2))\n                  \n                }\n                \n                \n                \n            }\n            if (style == \"cred.int\") {\n                layout(matrix(c(1, 2)), heights = c(5, 1))\n                \n                # par(mai=rep(0.5, 4))\n              beta.mean <- apply(x@beta[ind, ], 2, mean)\n              beta.cred_int <- apply(x@beta[ind, ], 2, quantile, c(level/2, 1 - level/2))\n              \n               \n                if (!missing(true.phi)) {\n                  ra.plot <- range(c(range(beta.cred_int), true.phi[-x@ind.4.prior]))\n                } else {\n                  ra.plot <- range(beta.cred_int)\n                }\n                plot(beta.mean, ylim = ra.plot, ylab = expression(beta), main = \"credibility intervals\", pch = 20)\n                segments(1:length(beta.mean), beta.cred_int[1, ], 1:length(beta.mean), beta.cred_int[2, ])\n                segments(1:length(beta.mean) - 0.2, beta.cred_int[1, ], 1:length(beta.mean) + 0.2, beta.cred_int[1, ])\n                segments(1:length(beta.mean) - 0.2, beta.cred_int[2, ], 1:length(beta.mean) + 0.2, beta.cred_int[2, ])\n                \n                if (!missing(true.phi)) \n                  points(true.phi[-x@ind.4.prior], col = 2, pch = 20)\n                \n                par(mai = c(0, 0, 0, 0))\n                plot.new()\n                if (!missing(true.phi)) {\n                  legend(x = \"center\", legend = c(\"credibility interval\", \"posterior mean\", \"true values\"), col = c(1, 1, 2), lty = c(1, -1, -1), pch = c(-1, 20, 20), \n                    cex = 0.8, horiz = TRUE)\n                  \n                } else {\n                  legend(x = \"center\", legend = c(\"credibility interval\", \"posterior mean\"), lty = c(1, -1), pch = c(-1, 20), horiz = TRUE)\n                }\n                \n            }\n        }\n        \n    }\n    # set plot settings back\n    par(original.settings)\n})\n\n\n######## \n#' Plot method for the Bayesian prediction class object\n#' \n#' @description Plot method for the S4 class Bayes.pred\n#' @param x Bayes.fit class\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param plot.legend logical(1)\n#' @param ylim optional\n#' @param xlab optional, default \"times\"\n#' @param ylab optional, default \"X\"\n#' @param col color for the prediction intervals, default 2\n#' @param lwd linewidth for the prediction intervals, default 2 \n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"plot\", signature = \"Bayes.pred\", definition = function(x, newwindow = FALSE, plot.legend = TRUE, ylim, xlab = \"times\", ylab = \"X\", col = 2, lwd = 2, ...) {\n    if (newwindow) {\n        x11(width = 10)\n    }\n    original.settings <- par(no.readonly = TRUE)\n    estim <- x@estim\n    \n    if(length(x@qu.u) == 0){\n      op <- par(mfrow = c(1, 1), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n      plot(estim$times, x@Xpred[1,], type = \"l\", ylim = range(c(range(x@Xpred), range(estim$Xdata))), xlab = xlab, ylab = ylab, col = col, lwd = lwd)\n      for(i in 2:nrow(x@Xpred[i,])) lines(estim$times, x@Xpred[1,], col=col, lwd=lwd)\n      for(i in 1:nrow(estim$Xdata)) lines(estim$times, estim$Xdata[i,])\n      \n      if (plot.legend) \n        legend(\"bottomright\", c(\"data\", \"drawn trajectories\"), lty = 1, col = c(1, col), lwd = c(1, lwd), box.lty = 0, inset = 0.01)\n      \n    }else{\n      qu.l <- x@qu.l\n      qu.u <- x@qu.u\n      cr <- x@coverage.rate\n      \n      op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n      if (missing(ylim)) \n        ylim <- range(c(min(qu.l), max(qu.u), range(estim$Xdata)))\n      \n      plot(estim$times[-1], qu.l, type = \"l\", ylim = ylim, xlab = xlab, ylab = ylab, col = col, lwd = lwd, ...)\n      lines(estim$times[-1], qu.u, col = col, lwd = lwd, ...)\n      \n      for (i in 1:nrow(estim$Xdata)) lines(estim$times, estim$Xdata[i, ])\n      lines(estim$times[-1], qu.l, col = col, lwd = lwd, ...)\n      lines(estim$times[-1], qu.u, col = col, lwd = lwd, ...)\n      \n      if (plot.legend) \n        legend(\"bottomright\", c(\"data\", \"prediction intervals\"), lty = 1, col = c(1, col), lwd = c(1, lwd), cex = 0.7, box.lty = 0, inset = 0.01)\n      \n      plot(estim$times[-1], cr, ylim = c(min(cr) * 0.9, max(c(cr), 1)), type = \"l\", xlab = xlab, ylab = \"coverage rates\")\n      abline(h = 0.95, col = 2, lty = 2)\n      if (plot.legend) \n        legend(\"bottomright\", \"95%\", lty = 2, col = 2, cex = 0.7, box.lty = 0, inset = 0.01)\n    }\n    \n    # set plot settings back\n    par(original.settings)\n})\n\n#' Comparing plot method\n#' \n#' @description Method for classes\n#' @param x Bayes.fit or Bayes.pred class\n#' @param y Bayes.fit or Bayes.pred class\n#' @param z Bayes.fit or Bayes.pred class\n#' @param ... other parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetGeneric(\"plot.compare\", function(x, y, z, ...) {\n   standardGeneric(\"plot.compare\")\n})\n######## \n#' Comparing plot method plot.compare for three Bayesian estimation class objects\n#' \n#' @description Comparison of the posterior densities for up to three S4 class Bayes.fit objects\n#' @param x Bayes.fit class\n#' @param y Bayes.fit class\n#' @param z Bayes.fit class\n#' @param names character vector of names for x, y and z\n#' @param true.values list of parameters to compare with the estimations, if available\n#' @param reduced logical(1), if TRUE, the chains are reduced with the burn-in and thin rate\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' \n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"plot.compare\", signature = \"Bayes.fit\", definition = function(x, y, z, names, true.values, reduced = TRUE, newwindow = FALSE) {\n  if (newwindow) {\n    x11(width = 10)\n  }\n  if(!missing(y)){\n    list.classes <- list(x, y)\n  }\n  if(!missing(z)){\n    list.classes <- list(x, y, z)\n  }\n  original.settings <- par(no.readonly = TRUE)\n\n  l.li <- length(list.classes)\n  \n  \n  if (reduced){\n    ind <- lapply(1:l.li, function(i) seq(list.classes[[i]]@burnIn + 1, length(list.classes[[i]]@sigma2), by = list.classes[[i]]@thinning))\n  }else{\n    ind <- lapply(1:l.li, function(i) 1:length(list.classes[[i]]@sigma2))\n  }\n    \n  random <- sapply(1:l.li, function(i) list.classes[[i]]@random)\n  if(is.list(random)) he <- FALSE\n  if(is.matrix(random)){\n    he <- TRUE\n    random <- c(1,2)\n  }\n  if(is.numeric(random)){\n    if(length(unique(random)) == 1){\n      he <- TRUE\n      random <- unique(random)\n    }else{\n      he <- FALSE\n    }\n  }\n  if(!he){\n    print(\"comparison of parameters not possible, only variance is plotted\")\n\n    op <- par(mfrow = c(1, 1), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.9, cex.lab = 0.8, cex.axis = 0.8)\n    ra.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$x))\n    ra.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$y))\n    plot(density(list.classes[[1]]@sigma2[ind[[1]]]), xlim = ra.x, ylim=ra.y, main = expression(\"Posterior of \" ~ sigma^2), xlab = expression(sigma^2))\n    for(i in 2:l.li) lines(density(list.classes[[i]]@sigma2[ind[[i]]]), col=i)\n    if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n  }  \n  if(he){\n    if (length(random) == 2) {\n\n     op <- par(mfrow = c(3, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.9, cex.lab = 0.8, cex.axis = 0.8)\n      \n      if (!missing(true.values)) {\n        ra.mu1.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]], 1])$x)), true.values$mu[1]))\n        ra.mu2.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]], 2])$x)), true.values$mu[2]))\n        ra.omega1.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]], 1])$x)), true.values$omega[1]))\n        ra.omega2.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]], 2])$x)), true.values$omega[2]))\n        ra.sigma2.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$x)), true.values$sigma2))\n      } else {        \n        ra.mu1.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]], 1])$x))\n        ra.mu2.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]], 2])$x))\n        ra.omega1.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]], 1])$x))\n        ra.omega2.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]], 2])$x))\n        ra.sigma2.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$x))\n      }  \n      ra.mu1.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]], 1])$y))\n      ra.mu2.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]], 2])$y))\n      ra.omega1.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]], 1])$y))\n      ra.omega2.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]], 2])$y))\n      ra.sigma2.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$y))\n      \n        \n      plot(density(list.classes[[1]]@mu[ind[[1]], 1]), xlim = ra.mu1.x, ylim= ra.mu1.y, main = expression(\"Posterior of \" ~ mu[1]), xlab = expression(mu[1]))\n      for(i in 2:l.li) lines(density(list.classes[[i]]@mu[ind[[i]], 1]), col=i)\n      if(!missing(true.values)) abline(v = true.values$mu[1], lty = 2)\n      if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n      \n      plot(density(list.classes[[1]]@mu[ind[[1]], 2]), xlim = ra.mu2.x, ylim= ra.mu2.y, main = expression(\"Posterior of \" ~ mu[2]), xlab = expression(mu[2]))\n      for(i in 2:l.li) lines(density(list.classes[[i]]@mu[ind[[i]], 2]), col=i)\n      if(!missing(true.values)) abline(v = true.values$mu[2], lty = 2)\n      if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n      \n      plot(density(list.classes[[1]]@omega[ind[[1]], 1]), xlim = ra.omega1.x, ylim= ra.omega1.y, main = expression(\"Posterior of \" ~ omega[1]), xlab = expression(omega[1]))\n      for(i in 2:l.li) lines(density(list.classes[[i]]@omega[ind[[i]], 1]), col=i)\n      if(!missing(true.values)) abline(v = true.values$omega[1], lty = 2)\n      if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n      \n      plot(density(list.classes[[1]]@omega[ind[[1]], 2]), xlim = ra.omega2.x, ylim= ra.omega2.y, main = expression(\"Posterior of \" ~ omega[2]), xlab = expression(omega[2]))\n      for(i in 2:l.li) lines(density(list.classes[[i]]@omega[ind[[i]], 2]), col=i)\n      if(!missing(true.values)) abline(v = true.values$omega[2], lty = 2)\n      if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n      \n      plot(density(list.classes[[1]]@sigma2[ind[[1]]]), xlim = ra.sigma2.x, ylim= ra.sigma2.y, main = expression(\"Posterior of \" ~ sigma^2), xlab = expression(sigma^2))\n      for(i in 2:l.li) lines(density(list.classes[[i]]@sigma2[ind[[i]]]), col=i)\n      if(!missing(true.values)) abline(v = true.values$sigma2, lty = 2)\n      if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n      \n      if(!missing(true.values)) {\n        par(mai = c(0, 0, 0, 0))\n        plot.new()\n        legend(x = \"center\", legend = \"true value\", lty = 2)\n      }\n\n    } else {\n      if (!missing(true.values)) {\n        ra.mu.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]]])$x)), true.values$mu))\n        ra.omega.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]]])$x)), true.values$omega))\n        ra.sigma2.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$x)), true.values$sigma2))\n      } else {\n        ra.mu.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]]])$x))\n        ra.omega.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]]])$x))\n        ra.sigma2.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$x))\n      }  \n      ra.mu.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@mu[ind[[i]]])$y))\n      ra.omega.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@omega[ind[[i]]])$y))\n      ra.sigma2.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@sigma2[ind[[i]]])$y))\n      \n      if (random == 1) {\n        op <- par(mfrow = c(2, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n\n        if (!missing(true.values)) {\n          ra.beta.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@beta[ind[[i]]])$x)), true.values$beta))\n        } else {\n          ra.beta.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@beta[ind[[i]]])$x))\n        }  \n        ra.beta.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@beta[ind[[i]]])$y))\n\n        if(!missing(true.values)) {\n          layout(matrix(c(1, 2, 3, 4, 5, 5), ncol = 2, byrow = TRUE), heights = c(4, 4, 1))\n          par(mai = rep(0.5, 4))\n        }    \n        \n        plot(density(list.classes[[1]]@mu[ind[[1]]]), xlim = ra.mu.x, ylim=ra.mu.y, main = expression(\"Posterior of \" ~ mu[1]), xlab = expression(mu[1]))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@mu[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$mu, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        plot(density(list.classes[[1]]@beta[ind[[1]]]), xlim = ra.beta.x, ylim=ra.beta.y, main = expression(\"Posterior of \" ~ beta), xlab = expression(beta))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@beta[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$beta, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        plot(density(list.classes[[1]]@omega[ind[[1]]]), xlim = ra.omega.x, ylim=ra.omega.y, main = expression(\"Posterior of \" ~ omega[1]), xlab = expression(omega[1]))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@omega[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$omega, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        plot(density(list.classes[[1]]@sigma2[ind[[1]]]), xlim = ra.sigma2.x, ylim=ra.sigma2.y, main = expression(\"Posterior of \" ~ sigma^2), xlab = expression(sigma^2))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@sigma2[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$sigma2, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        if(!missing(true.values)) {\n          par(mai = c(0, 0, 0, 0))\n          plot.new()\n          legend(x = \"center\", legend = \"true value\", lty = 2)\n        }\n            \n      } else {\n        op <- par(mfrow = c(2, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n   \n        if (!missing(true.values)) {\n          ra.alpha.x <- range(c(range(sapply(1:l.li, function(i) density(list.classes[[i]]@alpha[ind[[i]]])$x)), true.values$alpha))\n        } else {\n          ra.alpha.x <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@alpha[ind[[i]]])$x))\n        }  \n        ra.alpha.y <- range(sapply(1:l.li, function(i) density(list.classes[[i]]@alpha[ind[[i]]])$y))\n        \n        if (!missing(true.values)) {\n          layout(matrix(c(1, 2, 3, 4, 5, 5), ncol = 2, byrow = TRUE), heights = c(4, 4, 1))\n          par(mai = rep(0.5, 4))\n        }\n        \n        plot(density(list.classes[[1]]@alpha[ind[[1]]]), xlim = ra.alpha.x, ylim=ra.alpha.y, main = expression(\"Posterior of \" ~ alpha), xlab = expression(alpha))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@alpha[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$alpha, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        plot(density(list.classes[[1]]@mu[ind[[1]]]), xlim = ra.mu.x, ylim=ra.mu.y, main = expression(\"Posterior of \" ~ mu[2]), xlab = expression(mu[2]))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@mu[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$mu, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        plot(density(list.classes[[1]]@omega[ind[[1]]]), xlim = ra.omega.x, ylim=ra.omega.y, main = expression(\"Posterior of \" ~ omega[2]), xlab = expression(omega[2]))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@omega[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$omega, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        plot(density(list.classes[[1]]@sigma2[ind[[1]]]), xlim = ra.sigma2.x, ylim=ra.sigma2.y, main = expression(\"Posterior of \" ~ sigma^2), xlab = expression(sigma^2))\n        for(i in 2:l.li) lines(density(list.classes[[i]]@sigma2[ind[[i]]]), col=i)\n        if(!missing(true.values)) abline(v = true.values$sigma2, lty = 2)\n        if(!missing(names)) legend(\"topleft\", names, col=1:l.li, lty=1, cex=0.7, box.lty=0, inset=0.001)\n        \n        if(!missing(true.values)) {\n          par(mai = c(0, 0, 0, 0))\n          plot.new()\n          legend(x = \"center\", legend = \"true value\", lty = 2)\n          \n        }\n      }\n    }\n  }\n\n  # set plot settings back\n  par(original.settings)\n})\n\n######## \n#' Comparing plot method plot.compare for three Bayesian prediction class objects\n#' \n#' @description Comparison of the results for up to three S4 class Bayes.pred objects\n#' @param x Bayes.pred class\n#' @param y Bayes.pred class\n#' @param z Bayes.pred class\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param plot.legend logical(1)\n#' @param names names for the three object appearing in the legend\n#' @param ylim optional\n#' @param xlab optional, default \"times\"\n#' @param ylab optional, default \"X\"\n#' @param ... optional plot parameters\n#' \n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"plot.compare\", signature = \"Bayes.pred\", definition = function(x, y, z, newwindow = FALSE, plot.legend = TRUE, names, ylim, xlab = \"times\", ylab = \"X\", ...) {\n  if (newwindow) {\n    x11(width = 10)\n  }\n  original.settings <- par(no.readonly = TRUE)\n  \n  if(!missing(y)){\n    list.classes <- list(x, y)\n  }\n  if(!missing(z)){\n    list.classes <- list(x, y, z)\n  }\n  \n  l.li <- length(list.classes)\n\n  Xdata <- lapply(1:l.li, function(i) list.classes[[i]]@estim$Xdata)\n  times <- lapply(1:l.li, function(i) list.classes[[i]]@estim$times)\n  \n  if(any(sapply(1:l.li, function(i) length(list.classes[[i]]@qu.u)) == 0)){\n    op <- par(mfrow = c(1, l.li), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n    if(missing(names)){\n      for(i in 1:l.li){\n        plot(times[[i]], list.classes[[i]]@Xpred[1,], type = \"l\", ylim = range(list.classes[[i]]@Xpred), xlab = xlab, ylab = ylab, col=2, lwd = 2, ...)\n        for(j in 1:nrow(list.classes[[i]]@Xpred)) lines(times[[i]], list.classes[[i]]@Xpred[j,], lwd=2, col=2)\n        for(j in 1:nrow(Xdata[[i]])) lines(times[[i]], Xdata[[i]][j,])\n        if (plot.legend) \n          legend(\"bottomright\", c(\"data\", \"drawn trajectories\"), lty = 1, col = c(1, 2), lwd = c(1, 2), cex=0.7, box.lty = 0, inset = 0.01)\n      }\n    }else{\n      for(i in 1:l.li){\n        plot(times[[i]], list.classes[[i]]@Xpred[1,], type = \"l\", ylim = range(list.classes[[i]]@Xpred), main=names[i], xlab = xlab, ylab = ylab, col=2, lwd = 2, ...)\n        for(j in 1:nrow(list.classes[[i]]@Xpred)) lines(times[[i]], list.classes[[i]]@Xpred[j,], lwd=2, col=2)\n        for(j in 1:nrow(Xdata[[i]])) lines(times[[i]], Xdata[[i]][j,])\n        if (plot.legend) \n          legend(\"bottomright\", c(\"data\", \"drawn trajectories\"), lty = 1, col = c(1, 2), lwd = c(1, 2), cex=0.7, box.lty = 0, inset = 0.01)\n      }\n    }\n  }else{\n    qu.l <- lapply(1:l.li, function(i) list.classes[[i]]@qu.l)\n    qu.u <- lapply(1:l.li, function(i) list.classes[[i]]@qu.u)\n    cr <- lapply(1:l.li, function(i) list.classes[[i]]@coverage.rate)\n    \n    op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n    if (missing(ylim)) \n      ylim <- c(min(unlist(qu.l)), max(unlist(qu.u)))\n    \n    plot(times[[1]][-1], qu.l[[1]], type = \"l\", ylim = ylim, xlab = xlab, ylab = ylab, lwd = 2, ...)\n    lines(times[[1]][-1], qu.u[[1]], lwd = 2, ...)\n    \n    for(j in 1:l.li) for (i in 1:nrow(Xdata[[1]])) lines(times[[j]], Xdata[[j]][i, ], col=\"grey\")\n    for(i in 2:l.li) lines(times[[i]][-1], qu.l[[i]], col = i, lwd = 2, ...)\n    for(i in 2:l.li) lines(times[[i]][-1], qu.u[[i]], col = i, lwd = 2, ...)\n    \n    if (plot.legend){\n      if(!missing(names)){\n        legend(\"bottomright\", c(\"data\", names), lty = 1, col = c(\"grey\", 1:l.li), lwd = c(1, rep(2, l.li)), cex = 0.7, box.lty = 0, inset = 0.01)\n      }else{\n        legend(\"bottomright\", c(\"data\", \"prediction intervals\"), lty = 1, col = c(\"grey\", 1:l.li), lwd = c(1, rep(2, l.li)), cex = 0.7, box.lty = 0, inset = 0.01)\n      } \n    } \n    \n    plot(times[[1]][-1], cr[[1]], ylim = c(min(unlist(cr)) * 0.9, max(unlist(cr), 1)), lwd=2, type = \"l\", xlab = xlab, ylab = \"coverage rates\")\n    for(i in 2:l.li) lines(times[[i]][-1], cr[[i]], col=i, lwd=2)\n    abline(h = 0.95, lty = 2)\n    if (plot.legend){\n      if(!missing(names)){\n        legend(\"bottomright\", c(\"95%\", names), lty = c(2, rep(1, l.li)), col = c(1, 1:l.li), lwd = c(1, rep(2, l.li)), cex = 0.7, box.lty = 0, inset = 0.01)\n      }else{\n        legend(\"bottomright\", \"95%\", lty = 2, cex = 0.7, box.lty = 0, inset = 0.01)\n      } \n    } \n    \n  }\n  # set plot settings back\n  par(original.settings)\n})\n\n########################################################### VALIDATION\n\n#' Description of Freq.valid\n#' \n#' @description Validation\n#' @param x Freq.fit class\n#' @param Xtrue observed data\n#' @param model OU or CIR\n#' @param times observation times\n#' @param Mrep number of trajectories to be drawn\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param plot.valid to be added\n#' @param numj to be added\n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetGeneric(\"Freq.valid\", function(x, Xtrue, model, times, Mrep = 100, newwindow = FALSE, plot.valid = TRUE, numj = NULL, ...) {\n    standardGeneric(\"Freq.valid\")\n})\n\n\n#' Description of Freq.valid\n#' \n#' @description Validation\n#' @param x Freq.fit class\n#' @param Xtrue observed data\n#' @param model OU or CIR\n#' @param times observation times\n#' @param Mrep number of trajectories to be drawn\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param plot.valid to be added\n#' @param numj to be added\n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"Freq.valid\", signature = \"Freq.fit\", definition = function(x, Xtrue, model, times, Mrep = 100, newwindow = FALSE, plot.valid = TRUE, numj = NULL, ...) {\n    if (newwindow) {\n        x11(width = 10)\n    }\n    \n    times <- round(times, 10)\n    Tend <- max(times)\n    del <- round(min(diff(times)), 10)\n    timessimu <- round(seq(del, Tend, by = del), 10)\n    Mrep <- 100\n    M <- dim(Xtrue)[1]\n    sig <- sqrt(x@sigma2)\n    \n    if (is.null(numj) == 1) {\n        \n        if (dim(x@gridf)[1] == 2) {\n            \n            phihat <- x@estimphi\n            \n            Xnew <- as.list(1:M)  # for each phihat_j a new sample size Mrep\n            \n            if (model == \"OU\") {\n                for (j in 1:M) {\n                  Xnew[[j]] <- matrix(0, Mrep, N + 1)\n                  Xnew[[j]] <- t(sde.sim(T = Tend, X0 = Xtrue[j, 1], N = length(timessimu), delta = del, method = \"EA\", theta = c(phihat[, j], sig), model = \"OU\", M = Mrep))\n                }\n            }\n            if (model == \"CIR\") {\n                for (j in 1:M) {\n                  Xnew[[j]] <- matrix(0, Mrep, N + 1)\n                  Xnew[[j]] <- t(sde.sim(T = Tend, X0 = Xtrue[j, 1], N = length(timessimu), delta = del, method = \"milstein\", theta = c(phihat[, j], sig), model = \"CIR\", \n                    M = Mrep, sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x))))\n                }\n            }\n            \n            vecttimes <- intersect(round(timessimu, 10), round(times, 10))\n            N <- length(vecttimes)\n            \n            q <- matrix(0, M, N)\n            for (j in 1:M) {\n                for (i in 1:N) {\n                  q[j, i] <- sum(Xtrue[j, i] > Xnew[[j]][, which(timessimu == vecttimes[i])[1]])/Mrep\n                }\n            }\n            if (plot.valid == 1) {\n                op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n                plotnumj <- floor(runif(1, 1, M + 1))\n                \n                plot(c(0, timessimu), Xnew[[plotnumj]][1, ], type = \"l\", ylim = c(min(Xnew[[plotnumj]]) * 0.8, max(Xnew[[plotnumj]]) * 1.2), xlab = \"\", ylab = \"\")\n                for (k in 1:Mrep) {\n                  lines(c(0, timessimu), Xnew[[plotnumj]][k, ])\n                }\n                lines(times, Xtrue[plotnumj, ], col = \"red\", lwd = 2)\n                \n                plot(1:N/N, sort(q[plotnumj, ]), xlab = \"\", ylab = \"\", xlim = c(0, 1), ylim = c(0, 1))\n                abline(0, 1)\n            }\n        }\n        if (dim(x@gridf)[1] == 1) {\n            \n            phihat <- x@estimphi\n            \n            Xnew <- as.list(1:M)  # for each phihat_j a new sample size Mrep\n            \n            if (sum(random) == 1) {\n                if (model == \"OU\") {\n                  \n                  for (j in 1:M) {\n                    Xnew[[j]] <- matrix(0, Mrep, length(timessimu))\n                    Xnew[[j]] <- t(sde.sim(T = Tend, X0 = Xtrue[j, 1], N = length(timessimu), delta = del, method = \"EA\", theta = c(phihat[j], fixed, sig), model = \"OU\", \n                      M = Mrep))\n                  }\n                }\n                if (model == \"CIR\") {\n                  \n                  for (j in 1:M) {\n                    Xnew[[j]] <- matrix(0, Mrep, length(timessimu))\n                    Xnew[[j]] <- t(sde.sim(T = Tend, X0 = Xtrue[j, 1], N = length(timessimu), delta = del, method = \"milstein\", theta = c(phihat[j], fixed, sig), model = \"CIR\", \n                      M = Mrep, sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x))))\n                  }\n                }\n            }\n            \n            if (sum(random) == 2) {\n                \n                if (model == \"OU\") {\n                  \n                  for (j in 1:M) {\n                    Xnew[[j]] <- matrix(0, Mrep, length(timessimu))\n                    Xnew[[j]] <- t(sde.sim(T = Tend, X0 = Xtrue[j, 1], N = length(timessimu), delta = del, method = \"EA\", theta = c(fixed, phihat[j], sig), model = \"OU\", \n                      M = Mrep))\n                  }\n                }\n                if (model == \"CIR\") {\n                  \n                  for (j in 1:M) {\n                    Xnew[[j]] <- matrix(0, Mrep, length(timessimu))\n                    Xnew[[j]] <- t(sde.sim(T = Tend, X0 = Xtrue[j, 1], N = length(timessimu), delta = del, method = \"milstein\", theta = c(fixed, phihat[j], sig), model = \"CIR\", \n                      M = Mrep, sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x))))\n                    \n                  }\n                }\n            }\n            \n            vecttimes <- intersect(round(timessimu, 10), round(times, 10))\n            N <- length(vecttimes)\n            \n            q <- matrix(0, M, N)\n            for (j in 1:M) {\n                for (i in 1:N) {\n                  q[j, i] <- sum(Xtrue[j, i] > Xnew[[j]][, which(timessimu == vecttimes[i])[1]])/Mrep\n                }\n            }\n            \n            if (plot.valid == 1) {\n                op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n                \n                \n                plotnumj <- floor(M * runif(1, 0, 1) + 1)\n                plot(c(0, timessimu), Xnew[[plotnumj]][1, ], type = \"l\", ylim = c(min(Xnew[[plotnumj]]) * 0.8, max(Xnew[[plotnumj]]) * 1.2), xlab = \"\", ylab = \"\")\n                for (k in 1:Mrep) {\n                  lines(c(0, timessimu), Xnew[[plotnumj]][k, ])\n                }\n                lines(times, Xtrue[plotnumj, ], col = \"red\", lwd = 2)\n                \n                plot(1:N/N, sort(q[plotnumj, ]), xlab = \"\", ylab = \"\")\n                abline(0, 1)\n            }\n        }\n        \n    }\n    \n    \n    \n    if (is.null(numj) == 0) {\n        \n        \n        if (dim(x@gridf)[1] == 2) {\n            \n            phihat <- x@estimphi[, numj]\n            \n            if (model == \"OU\") {\n                Xnew <- t(sde.sim(T = Tend, X0 = Xtrue[numj, 1], N = length(timessimu), delta = del, method = \"EA\", theta = c(phihat, sig), model = \"OU\", M = Mrep))\n            }\n            if (model == \"CIR\") {\n                Xnew <- t(sde.sim(T = Tend, X0 = Xtrue[numj, 1], N = length(timessimu), delta = del, method = \"milstein\", theta = c(phihat, sig), model = \"CIR\", M = Mrep, \n                  sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x))))\n            }\n        }\n        \n        if (dim(x@gridf)[1] == 1) {\n            phihat <- x@estimphi[numj]\n            \n            if (sum(random) == 1) {\n                if (model == \"OU\") {\n                  Xnew <- t(sde.sim(T = Tend, X0 = Xtrue[numj, 1], N = length(timessimu), delta = del, method = \"EA\", theta = c(phihat, fixed, sig), model = \"OU\", M = Mrep))\n                }\n                \n                if (model == \"CIR\") {\n                  Xnew <- t(sde.sim(T = Tend, X0 = Xtrue[numj, 1], N = length(timessimu), delta = del, method = \"milstein\", theta = c(phihat, fixed, sig), model = \"CIR\", \n                    M = Mrep, sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x))))\n                }\n            }\n            if (sum(random) == 2) {\n                if (model == \"OU\") {\n                  Xnew <- t(sde.sim(T = Tend, X0 = Xtrue[numj, 1], N = length(timessimu), delta = del, method = \"EA\", theta = c(fixed, phihat, sig), model = \"OU\", M = Mrep))\n                }\n                if (model == \"CIR\") {\n                  Xnew <- t(sde.sim(T = Tend, X0 = Xtrue[numj, 1], N = length(timessimu), delta = del, method = \"milstein\", theta = c(fixed, phihat, sig), model = \"CIR\", \n                    M = Mrep, sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x))))\n                }\n            }\n        }\n        vecttimes <- intersect(round(timessimu, 10), round(times, 10))\n        N <- length(vecttimes)\n        \n        q <- rep(0, N)\n        for (i in 1:N) {\n            q[i] <- sum(Xtrue[numj, which(times == vecttimes[i])[1]] > Xnew[, which(timessimu == vecttimes[i])[1]])/Mrep\n        }\n        \n        if (plot.valid == 1) {\n            plotnumj <- numj\n            op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n            \n            plot(c(0, timessimu), Xnew[1, ], type = \"l\", ylim = c(min(Xnew) * 0.8, max(Xnew) * 1.2), xlab = \"\", ylab = \"\")\n            for (k in 1:Mrep) {\n                lines(c(0, timessimu), Xnew[k, ])\n            }\n            lines(times, Xtrue[plotnumj, ], col = \"red\", lwd = 2)\n            \n            \n            plot(1:N/N, sort(q), xlab = \"\", ylab = \"\", xlim = c(0, 1), ylim = c(0, 1))\n            abline(0, 1)\n        }\n    }\n    return(list(quantiles = q, Xnew = Xnew, plotnumj = plotnumj))\n})\n\n########################################################### PREDICTION\n\n#' Prediction method\n#' \n#' @description Prediction\n#' @param x Freq.fit or Bayes.fit class\n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetGeneric(\"pred\", function(x, ...) {\n  standardGeneric(\"pred\")\n})\n\n\n\n# setGeneric(\"Freq.pred\", function(x, Xtrue, model, estim.method, T, level = 0.05, newwindow = FALSE, plot.pred = TRUE, ...) {\n#     standardGeneric(\"Freq.pred\")\n# })\n\n#' Prediction method for the Freq.fit class object\n#' \n#' @description Frequentist prediction\n#' @param x Freq.fit class\n#' @param Xtrue observed data\n#' @param model OU or CIR\n#' @param estim.method nonparam or paramML\n#' @param T last time point\n#' @param level alpha for the predicion intervals, default 0.05\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param plot.pred logical(1), if TRUE, the results are depicted grafically\n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"pred\", signature = \"Freq.fit\", definition = function(x, Xtrue, model, estim.method, T, level = 0.05, newwindow = FALSE, plot.pred = TRUE, ...) {\n    if (newwindow) {\n        x11(width = 10)\n    }\n    \n    if (dim(x@gridf)[1] == 1) {\n        index <- x@index\n        M <- length(index)\n        sig <- sqrt(x@sigma2)\n        \n        N <- dim(Xtrue)[2] - 1\n        delta <- T/N\n        Xpred <- matrix(0, M, N + 1)\n        times <- seq(0, T, by = delta)\n        \n        if (sum(random) == 1) {\n            phipred <- rep(0, M)\n            if (estim.method == \"nonparam\") {\n                p <- x@estimf/sum(x@estimf)\n                for (i in 1:M) {\n                  phipred[i] <- discr(x@gridf, p)\n                }\n            }\n            if (estim.method == \"paramML\") {\n                phipred <- rnorm(M, x@mu, x@omega)\n            }\n            \n            if (model == \"OU\") {\n                indexpred <- 1:M\n                for (j in 1:M) {\n                  Xpred[j, ] <- sde.sim(T = T, X0 = Xtrue[j, 1], N = N, delta = T/N, method = \"EA\", theta = c(phipred[j], fixed, sig), model = \"OU\")\n                }\n            }\n            if (model == \"CIR\") {\n                indexpred <- which(phipred > 0)\n                phipred <- phipred[indexpred]\n                Mpred <- length(phipred)\n                Xpred <- matrix(0, Mpred, N + 1)\n                for (j in 1:Mpred) {\n                  Xpred[j, ] <- sde.sim(T = T, X0 = Xtrue[indexpred[j], 1], N = N, delta = T/N, method = \"milstein\", theta = c(phipred[j], fixed, sig), model = \"CIR\", \n                    sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x)))\n                }\n            }\n        }\n        \n        if (sum(random) == 2) {\n            \n            phipred <- rep(0, M)\n            if (estim.method == \"nonparam\") {\n                p <- x@estimf/sum(x@estimf)\n                for (i in 1:M) {\n                  phipred[i] <- discr(x@gridf, p)\n                }\n            }\n            if (estim.method == \"paramML\") {\n                phipred <- rnorm(M, x@mu, x@omega)\n            }\n            \n            if (model == \"OU\") {\n                indexpred <- which(phipred > 0)\n                phipred <- phipred[indexpred]\n                Mpred <- length(indexpred)\n                Xpred <- matrix(0, Mpred, N + 1)\n                \n                for (j in 1:Mpred) {\n                  Xpred[j, ] <- sde.sim(T = T, X0 = Xtrue[j, 1], N = N, delta = T/N, method = \"EA\", theta = c(fixed, phipred[j], sig), model = \"OU\")\n                }\n            }\n            if (model == \"CIR\") {\n                indexpred <- which(phipred > 0)\n                phipred <- phipred[indexpred]\n                Mpred <- length(phipred)\n                Xpred <- matrix(0, Mpred, N + 1)\n                for (j in 1:Mpred) {\n                  Xpred[j, ] <- sde.sim(T = T, X0 = Xtrue[indexpred[j], 1], N = N, delta = T/N, method = \"milstein\", theta = c(fixed, phipred[j], sig), model = \"CIR\", \n                    sigma.x = expression(sig/(2 * sqrt(x))), sigma = expression(sig * sqrt(x)))\n                }\n            }\n        }\n        \n        if (plot.pred == TRUE) {\n            op <- par(mfrow = c(1, 3), mar = c(2, 2, 1.8, 1.8), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n            \n            plot(sort(x@estimphi[indexpred]), sort(phipred), pch = 18, xlim = c(min(x@estimphi, phipred) * 0.8, max(x@estimphi, phipred) * 1.2), ylim = c(min(x@estimphi, \n                phipred) * 0.8, max(x@estimphi, phipred) * 1.2), ylab = \"\", xlab = \"\")\n            abline(0, 1)\n            plot(times, Xtrue[indexpred[1], ], type = \"l\", xlab = \"\", ylab = \"\", ylim = c(min(Xtrue, Xpred) * 0.8, max(Xtrue, Xpred) * 1.5), main = \"True trajectories\")\n            for (j in indexpred) {\n                lines(times, Xtrue[j, ], col = j)\n            }\n            \n            plot(times, Xpred[1, ], type = \"l\", xlab = \"\", ylab = \"\", ylim = c(min(Xtrue, Xpred) * 0.8, max(Xtrue, Xpred) * 1.5), main = \"Predictive trajectories\")\n            for (j in 1:length(indexpred)) {\n                lines(times, Xpred[j, ], col = 1)\n            }\n            l.bound = level/2\n            u.bound = 1 - level/2\n            PI <- matrix(0, 2, N + 1)\n            for (k in (1:N + 1)) {\n                PI[, k] <- quantile(Xpred[, k], c(l.bound, u.bound))\n            }\n            lines(times, PI[1, ], col = \"red\", lwd = 2)\n            lines(times, PI[2, ], col = \"red\", lwd = 2)\n            # if (plot.legend) { legend('topright', c('predictive trajectories', 'prediction intervals'), lty = 1, col = c(1, 'red'), lwd = c(1, 2), box.lty = 0, inset = 0.08)#,\n            # text.width = 0.7) }\n        }\n        return(list(phipred = phipred, Xpred = Xpred, indexpred = indexpred))\n    }\n    \n    if (dim(x@gridf)[1] == 2) {\n        \n        \n        index <- x@index\n        M <- length(index)\n        \n        sig <- sqrt(x@sigma2)\n        \n        N <- dim(Xtrue)[2] - 1\n        delta <- T/N\n        Xpred <- matrix(0, M, N + 1)\n        times <- seq(0, T, by = delta)\n        \n        phipred <- matrix(0, 2, M)\n        \n        if (estim.method == \"paramML\") {\n            mu <- x@mu\n            omega <- x@omega\n            mu1 <- mu[1]\n            mu2 <- mu[2]\n            omega1 <- omega[1]\n            omega2 <- omega[2]\n            phipred[1, ] <- rnorm(M, mu1, omega1)\n            phipred[2, ] <- rnorm(M, mu2, omega2)\n        }\n        if (estim.method == \"nonparam\") {\n            gridf1 <- x@gridf[1, ]\n            gridf2 <- x@gridf[2, ]\n            marg1 <- ((max(gridf2) - min(gridf2))/length(gridf2)) * apply(x@estimf, 1, sum)\n            marg2 <- ((max(gridf1) - min(gridf1))/length(gridf1)) * apply(x@estimf, 2, sum)\n            \n            p1 <- marg1/sum(marg1)\n            p2 <- marg2/sum(marg2)\n            for (i in 1:M) {\n                phipred[1, i] <- discr(gridf1, p1)\n                phipred[2, i] <- discr(gridf2, p2)\n            }\n        }\n        \n        if (model == \"OU\") {\n            indexpred <- which(phipred[2, ] > 0)\n            phipred <- phipred[, indexpred]\n            Mpred <- length(indexpred)\n            Xpred <- matrix(0, Mpred, N + 1)\n            for (j in 1:Mpred) {\n                Xpred[j, ] <- sde.sim(T = T, X0 = Xtrue[j, 1], N = N, delta = T/N, method = \"EA\", theta = c(phipred[, j], sig), model = \"OU\")\n            }\n        }\n        if (model == \"CIR\") {\n            indexpred <- which((phipred[1, ] > 0) & (phipred[2, ] > 0))\n            phipred <- phipred[, indexpred]\n            Mpred <- length(indexpred)\n            Xpred <- matrix(0, Mpred, N + 1)\n            for (j in 1:Mpred) {\n                Xpred[j, ] <- sde.sim(T = T, X0 = Xtrue[indexpred[j], 1], N = N, delta = T/N, method = \"milstein\", theta = c(phipred[, j], sig), model = \"CIR\", sigma.x = expression(sig/(2 * \n                  sqrt(x))), sigma = expression(sig * sqrt(x)))\n            }\n        }\n        \n        if (plot.pred == TRUE) {\n            \n            op <- par(mfrow = c(2, 2), mar = c(2, 2, 1.8, 1.8), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n            \n            plot(sort(x@estimphi[1, indexpred]), sort(phipred[1, ]), pch = 18, xlim = c(min(x@estimphi[1, ], phipred[1, ]) * 0.8, max(x@estimphi[1, ], phipred[1, ]) * \n                1.2), ylim = c(min(x@estimphi[1, ], phipred[1, ]) * 0.8, max(x@estimphi[1, ], phipred[1, ]) * 1.2), ylab = \"\", xlab = \"\", main = \"First random effect\")\n            abline(0, 1)\n            plot(sort(x@estimphi[2, indexpred]), sort(phipred[2, ]), pch = 18, xlim = c(min(x@estimphi[2, ], phipred[2, ]) * 0.8, max(x@estimphi[2, ], phipred[2, ]) * \n                1.2), ylim = c(min(x@estimphi, phipred) * 0.8, max(x@estimphi, phipred) * 1.2), ylab = \"\", xlab = \"\", main = \"Second random effect\")\n            abline(0, 1)\n            \n            plot(times, Xtrue[indexpred[1], ], type = \"l\", xlab = \"\", ylab = \"\", ylim = c(min(Xtrue, Xpred) * 0.8, max(Xtrue, Xpred) * 1.5), main = \"True trajectories\")\n            for (j in indexpred) {\n                lines(times, Xtrue[j, ], col = j)\n            }\n            \n            plot(times, Xpred[1, ], type = \"l\", xlab = \"\", ylab = \"\", ylim = c(min(Xtrue, Xpred) * 0.8, max(Xtrue, Xpred) * 1.5), main = \"Predictive trajectories\")\n            for (j in 1:length(indexpred)) {\n                lines(times, Xpred[j, ], col = 1)\n            }\n            \n            l.bound = level/2\n            u.bound = 1 - level/2\n            PI <- matrix(0, 2, N + 1)\n            for (k in (1:N + 1)) {\n                PI[, k] <- quantile(Xpred[, k], c(l.bound, u.bound))\n            }\n            lines(times, PI[1, ], col = \"red\", lwd = 2)\n            lines(times, PI[2, ], col = \"red\", lwd = 2)\n            # if (plot.legend) { legend('topright', c('predictive trajectories', 'prediction intervals'), lty = 1, col = c(1, 'red'), lwd = c(1, 2), box.lty = 0, inset = 0.01) }\n        }\n        return(list(phipred = phipred, Xpred = Xpred, indexpred = indexpred))\n    }\n})\n\n# setGeneric(\"Bayes.pred\", function(estim, level = 0.05, newwindow = FALSE, plot.pred = TRUE, plot.legend = TRUE, burnIn, thinning, ...) {\n#     standardGeneric(\"Bayes.pred\")\n# })\n\n######## \n#' Bayesian prediction method for a class object Bayes.fit\n#' \n#' @description Bayesian prediction\n#' @param x Bayes.fit class\n#' @param level alpha for the predicion intervals, default 0.05\n#' @param newwindow logical(1), if TRUE, a new window is opened for the plot\n#' @param plot.pred logical(1), if TRUE, the results are depicted grafically\n#' @param plot.legend logical(1)\n#' @param burnIn optional, if missing, the proposed value of the mixedsde.fit function is taken\n#' @param thinning optional, if missing, the proposed value of the mixedsde.fit function is taken\n#' @param only.interval logical(1), if TRUE, only prediction intervals are calculated, much faster than sampling from the whole predictive distribution\n#' @param sample.length number of samples to be drawn from the predictive distribution, if only.interval = FALSE\n#' @param cand.length number of candidates for which the predictive density is calculated, i.e. the candidates to be drawn from\n#' @param trajectories logical(1), if TRUE, only trajectories are drawn instead of sampling from the predictive distribution, similar to the frequentist approach\n#' @param ylim optional\n#' @param xlab optional, default \"times\"\n#' @param ylab optional, default \"X\"\n#' @param col color for the prediction intervals, default 2\n#' @param lwd linewidth for the prediction intervals, default 2 \n#' @param ... optional plot parameters\n#' @references \n#' Dion, C., Hermann, S. and Samson, A. (2016). Mixedsde: an R package to fit mixed stochastic differential equations.\n#' \nsetMethod(f = \"pred\", signature = \"Bayes.fit\", definition = function(x, level = 0.05, newwindow = FALSE, plot.pred = TRUE, plot.legend = TRUE, burnIn, \n    thinning, only.interval = TRUE, sample.length = 500, cand.length = 100, trajectories = FALSE, ylim, xlab = \"times\", ylab = \"X\", col = 2, lwd = 2, ...) {\n    if (newwindow) {\n        x11(width = 10)\n    }\n    original.settings <- par(no.readonly = TRUE)\n    \n    if (missing(burnIn)) \n        burnIn <- x@burnIn\n    if (missing(thinning)) \n        thinning <- x@thinning\n    \n    \n    random <- x@random\n    \n    est <- chain2samples(x, burnIn, thinning)\n    K <- length(est@sigma2)\n    dens <- function(t, samples) mean(dnorm(t, samples$mu, sqrt(samples$omega)))\n    M <- nrow(x@Xdata)\n\n#####\n    \n    model <- x@model\n    \n    if(trajectories){\n      \n      if (length(random) == 2) {\n        \n        cand1 <- seq(mean(est@mu[, 1]) - 4 * sqrt(mean(est@omega[, 1])), mean(est@mu[, 1]) + 4 * sqrt(mean(est@omega[, 1])), length = 500)\n        cand2 <- seq(mean(est@mu[, 2]) - 4 * sqrt(mean(est@omega[, 2])), mean(est@mu[, 2]) + 4 * sqrt(mean(est@omega[, 2])), length = 500)\n        \n        phi.pred <- matrix(0, M, 2)\n        \n        prob <- sapply(cand1, dens, samples = list(mu = est@mu[, 1], omega = est@omega[, 1]))\n        phi.pred[, 1] <- replicate(M, discr(cand1, prob))\n        prob <- sapply(cand2, dens, samples = list(mu = est@mu[, 2], omega = est@omega[, 2]))\n        phi.pred[, 2] <- replicate(M, discr(cand2, prob))\n        \n      } else {\n        \n        cand <- seq(mean(est@mu) - 4 * sqrt(mean(est@omega)), mean(est@mu) + 4 * sqrt(mean(est@omega)), length = 500)\n        prob <- sapply(cand, dens, samples = list(mu = est@mu, omega = est@omega))\n        phi.pred <- replicate(M, discr(cand, prob))\n        \n      }\n\n      X0 <- x@Xdata[1, ]\n      \n      Xpred <- matrix(0, M, length(x@times)); Xpred[1,] <- X0\n      sigma2 <- mean(est@sigma2)\n      dt <- diff(x@times)\n      if (model == \"OU\") {\n        m.traj <- function(t, phi, Xn_1) phi[1]/phi[2] + (Xn_1 - phi[1]/phi[2]) * exp(-phi[2] * t)\n        v.traj <- function(t, phi) phi[3] * (1 - exp(-2 * phi[2] * t))/2/phi[2]\n        \n        if(length(random) == 2){\n          for(i in 2:length(x@times)){\n            for(j in 1:M){\n              Xpred[j,i] <- rnorm(1, m.traj(dt[i-1], phi.pred[j, ], Xpred[j,i-1]), sqrt(v.traj(dt[i-1], c(phi.pred[j, ], sigma2))))\n            }\n          }\n        }else{\n          if(random == 1){\n            beta <- mean(est@beta)\n            for(i in 2:length(x@times)){\n              for(j in 1:M){\n                Xpred[j,i] <- rnorm(1, m.traj(dt[i-1], c(phi.pred[j], beta), Xpred[j,i-1]), sqrt(v.traj(dt[i-1], c(phi.pred[j], beta, sigma2))))\n              }\n            }  \n          }else{\n            alpha <- mean(est@alpha)\n            for(i in 2:length(x@times)){\n              for(j in 1:M){\n                Xpred[j,i] <- rnorm(1, m.traj(dt[i-1], c(alpha, phi.pred[j]), Xpred[j,i-1]), sqrt(v.traj(dt[i-1], c(alpha, phi.pred[j], sigma2))))\n              }\n            }  \n            \n          }\n        }\n\n      } else {\n        \n        likeli.CIR <- function(x, t, phi, sigma2, Xn_1) dcCIR2(x, t, Xn_1, c(phi, sqrt(sigma2)))\n        cand <- function(i) {\n          he <- x@Xdata[, i]\n          seq(min(he) - abs(min(he)) * 0.5, max(he) + abs(max(he)) * 0.5, length = cand.length)\n        }\n        \n        if(length(random) == 2){\n          for(i in 2:length(x@times)){\n            for(j in 1:M){\n              prob <- likeli.CIR(cand(i), dt[i-1], phi.pred[j, ], sigma2, Xpred[j,i-1])\n              Xpred[j,i] <- discr(cand(i), prob)\n            }\n          }\n          \n        }else{\n          if(random == 1){\n            beta <- mean(est@beta)\n            for(i in 2:length(x@times)){\n              for(j in 1:M){\n                prob <- likeli.CIR(cand(i), dt[i-1], c(phi.pred[j], beta), sigma2, Xpred[j,i-1])\n                Xpred[j,i] <- discr(cand(i), prob)\n              }\n            }\n            \n          }else{  # random == 2\n            alpha <- mean(est@alpha)\n            for(i in 2:length(x@times)){\n              for(j in 1:M){\n                prob <- likeli.CIR(cand(i), dt[i-1], c(alpha, phi.pred[j]), sigma2, Xpred[j,i-1])\n                Xpred[j,i] <- discr(cand(i), prob)\n              }\n            }\n          }\n        }\n      }\n      \n      \n      if (plot.pred == TRUE) {\n        \n        op <- par(mfrow = c(1, 1), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n        if (missing(ylim)) \n          ylim <- range(c(range(x@Xdata), range(Xpred)))\n        \n        plot(x@times, x@Xdata[1,], type = \"l\", ylim = ylim, xlab = xlab, ylab = ylab, ...)\n        for(i in 2:M) lines(x@times, x@Xdata[i,], ...)\n        \n        for(i in 1:M) lines(x@times, Xpred[i,], col = col, lwd = lwd, ...)\n        for(i in 2:M) lines(x@times, x@Xdata[i,], ...)\n        \n        if (plot.legend) \n          legend(\"bottomright\", c(\"data\", \"drawn trajectories\"), lty = 1, col = c(1, col), lwd = c(1, lwd), cex = 0.7, box.lty = 0, inset = 0.01)\n      }\n\n      return(new(Class = \"Bayes.pred\", phi.pred = as.matrix(phi.pred), Xpred = Xpred, estim = out(x)))\n      \n    }else{   # end if(trajectories)\n      \n      if (length(random) == 2) {\n        \n        cand1 <- seq(mean(est@mu[, 1]) - 4 * sqrt(mean(est@omega[, 1])), mean(est@mu[, 1]) + 4 * sqrt(mean(est@omega[, 1])), length = 500)\n        cand2 <- seq(mean(est@mu[, 2]) - 4 * sqrt(mean(est@omega[, 2])), mean(est@mu[, 2]) + 4 * sqrt(mean(est@omega[, 2])), length = 500)\n        \n        phi.pred <- matrix(0, K, 2)\n        \n        prob <- sapply(cand1, dens, samples = list(mu = est@mu[, 1], omega = est@omega[, 1]))\n        phi.pred[, 1] <- replicate(K, discr(cand1, prob))\n        prob <- sapply(cand2, dens, samples = list(mu = est@mu[, 2], omega = est@omega[, 2]))\n        phi.pred[, 2] <- replicate(K, discr(cand2, prob))\n        \n      } else {\n        \n        cand <- seq(mean(est@mu) - 4 * sqrt(mean(est@omega)), mean(est@mu) + 4 * sqrt(mean(est@omega)), length = 500)\n        prob <- sapply(cand, dens, samples = list(mu = est@mu, omega = est@omega))\n        phi.pred <- replicate(K, discr(cand, prob))\n        \n      }\n      X0 <- x@Xdata[1, 1]\n      \n      if (model == \"OU\") {\n        m <- function(t, phi) phi[1]/phi[2] + (X0 - phi[1]/phi[2]) * exp(-phi[2] * t)\n        v <- function(t, phi) phi[3] * (1 - exp(-2 * phi[2] * t))/2/phi[2]\n        likeli <- function(x, t, phi, sigma2) dnorm(x, m(t, phi), sqrt(v(t, c(phi, sigma2))))\n      } else {\n        likeli <- function(x, t, phi, sigma2) dcCIR2(x, t, X0, c(phi, sqrt(sigma2)))\n      }\n      \n      K <- length(est@sigma2)\n      \n      cand <- function(i) {\n        he <- x@Xdata[, i + 1]\n        seq(min(he) - abs(min(he)) * 0.5, max(he) + abs(max(he)) * 0.5, length = cand.length)\n      }\n      lt <- length(x@times) - 1\n      l.bound = level/2\n      u.bound = 1 - level/2\n      \n      if (length(random) == 2) {\n        pred <- function(i) {\n          dens <- function(c, samples) mean(sapply(1:K, function(a) likeli(c, x@times[i + 1]-x@times[1], samples$phi[a, ], samples$sigma2[a])))\n          ca <- cand(i)\n          prob <- sapply(ca, dens, samples = list(phi = phi.pred, sigma2 = est@sigma2))\n          \n          if(!only.interval){\n            samp.X <- replicate(sample.length, discr(ca, prob))\n          } else{\n            samp.X <- NULL\n          }\n          \n          VF <- cumsum(prob)/sum(prob)\n          qu.l <- ca[which(VF >= l.bound)[1]]\n          qu.u <- ca[which(VF >= u.bound)[1]]\n          return(list(samp.X = samp.X, qu.l = qu.l, qu.u = qu.u))\n        }\n        \n      } else {\n        if (random == 1) {\n          pred <- function(i) {\n            # print(i)\n            dens <- function(c, samples) mean(sapply(1:K, function(a) likeli(c, x@times[i + 1]-x@times[1], c(samples$phi[a], samples$beta[a]), samples$sigma2[a])))\n            ca <- cand(i)\n            prob <- sapply(ca, dens, samples = list(phi = phi.pred, beta = est@beta, sigma2 = est@sigma2))\n            \n            if(!only.interval){\n              samp.X <- replicate(sample.length, discr(ca, prob))\n            } else{\n              samp.X <- NULL\n            }\n            \n            VF <- cumsum(prob)/sum(prob)\n            qu.l <- ca[which(VF >= l.bound)[1]]\n            qu.u <- ca[which(VF >= u.bound)[1]]\n            return(list(samp.X = samp.X, qu.l = qu.l, qu.u = qu.u))\n          }\n        } else {\n          pred <- function(i) {\n            dens <- function(c, samples) mean(sapply(1:K, function(a) likeli(c, x@times[i + 1]-x@times[1], c(samples$alpha[a], samples$phi[a]), samples$sigma2[a])))\n            ca <- cand(i)\n            prob <- sapply(ca, dens, samples = list(phi = phi.pred, alpha = est@alpha, sigma2 = est@sigma2))\n            \n            if(!only.interval){\n              samp.X <- replicate(sample.length, discr(ca, prob))\n            } else{\n              samp.X <- NULL\n            }\n            \n            VF <- cumsum(prob)/sum(prob)\n            qu.l <- ca[which(VF >= l.bound)[1]]\n            qu.u <- ca[which(VF >= u.bound)[1]]\n            return(list(samp.X = samp.X, qu.l = qu.l, qu.u = qu.u))\n          }\n        }\n        \n      }\n      \n      qu.l <- numeric(lt)\n      qu.u <- numeric(lt)\n      if(!only.interval) Xpred <- matrix(0, sample.length, lt)\n      for (i in 1:lt) {\n        he <- pred(i)\n        if(!only.interval) Xpred[, i] <- he$samp.X\n        qu.u[i] <- he$qu.u\n        qu.l[i] <- he$qu.l\n      }\n      \n      cr <- apply(qu.l <= t(x@Xdata[, -1]) & qu.u >= t(x@Xdata[, -1]), 1, mean)\n      \n      if (plot.pred == TRUE) {\n        \n        op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)\n        if (missing(ylim)) \n          ylim <- range(c(min(qu.l), max(qu.u), range(x@Xdata)))\n        \n        plot(x@times[-1], qu.l, type = \"l\", ylim = ylim, xlab = xlab, ylab = ylab, col = col, lwd = lwd, ...)\n        lines(x@times[-1], qu.u, col = col, lwd = lwd, ...)\n        \n        for (i in 1:nrow(x@Xdata)) lines(x@times, x@Xdata[i, ])\n        lines(x@times[-1], qu.l, col = col, lwd = lwd, ...)\n        lines(x@times[-1], qu.u, col = col, lwd = lwd, ...)\n        \n        if (plot.legend) \n          legend(\"bottomright\", c(\"data\", \"prediction intervals\"), lty = 1, col = c(1, col), lwd = c(1, lwd), cex = 0.7, box.lty = 0, inset = 0.01)\n        \n        plot(x@times[-1], cr, ylim = c(min(cr) * 0.9, max(c(cr), 1)), type = \"l\", xlab = xlab, ylab = \"coverage rates\")\n        abline(h = 1-level, col = 2, lty = 2)\n        if (plot.legend) \n          legend(\"bottomright\", paste( (1-level)*100, \"%\", sep=\"\"), lty = 2, col = 2, cex = 0.7, box.lty = 0, inset = 0.01)\n        \n      }\n      \n      if(!only.interval){\n        return(new(Class = \"Bayes.pred\", phi.pred = as.matrix(phi.pred), Xpred = Xpred, coverage.rate = cr, qu.l = qu.l, qu.u = qu.u, estim = out(x)))\n      } else{\n        return(new(Class = \"Bayes.pred\", phi.pred = as.matrix(phi.pred), coverage.rate = cr, qu.l = qu.l, qu.u = qu.u, estim = out(x)))\n      }\n    }\n\n    # set plot settings back\n    par(original.settings)\n    \n})\n\n \n",
    "created" : 1444891618635.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "18|75|37|2|\n251|169|567|0|\n661|51|717|0|\n728|109|753|0|\n764|44|779|0|\n788|45|808|0|\n821|96|954|0|\n972|39|1369|0|\n1388|170|1431|0|\n1461|142|1664|0|\n1684|173|1759|0|\n1798|167|1995|0|\n2032|159|2233|0|\n",
    "hash" : "2641768950",
    "id" : "64D03196",
    "lastKnownWriteTime" : 1454511375,
    "path" : "~/Documents/BitBucket/mixedsde/mixedsde/R/mixedsde.fit.R",
    "project_path" : "R/mixedsde.fit.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}