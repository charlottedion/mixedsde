pred.result.trajectories <- pred(estim_Bayes, trajectories = TRUE)
validbayes <- valid(estim_Bayes, numj = 1)
proc.time()-pr
pr <- proc.time(); model = 'CIR'; M <- 200;  T <- 10 ; delta <- 0.001; N <- floor(T/delta); sigma <- 0.01
random <- c(1,2); density.phi <- 'gammainvgamma2'
param<- c(1.8, 0.8, 8, 0.05);
simu <- mixedsde.sim(M=M,T=T,N=N,model=model,random=random,
density.phi=density.phi,param=param,sigma=sigma, invariant = 1)
X <- simu$X ; phi <- simu$phi; times <- simu$times
estim.method<- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,
estim.method= 'nonparam')
outputsNP <- out(estim)
summary(estim)
print(estim); proc.time()-pr
pr <- proc.time(); model = 'CIR'; M <- 200;  T <- 10 ; delta <- 0.1; N <- floor(T/delta); sigma <- 0.01
random <- c(1,2); density.phi <- 'gammainvgamma2'
param<- c(1.8, 0.8, 8, 0.05);
simu <- mixedsde.sim(M=M,T=T,N=N,model=model,random=random,
density.phi=density.phi,param=param,sigma=sigma, invariant = 1)
X <- simu$X ; phi <- simu$phi; times <- simu$times
estim.method<- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,
estim.method= 'nonparam')
outputsNP <- out(estim)
summary(estim)
print(estim); proc.time()-pr
pr <- proc.time(); model = 'CIR'; M <- 200;  T <- 10 ; delta <- 0.01; N <- floor(T/delta); sigma <- 0.01
random <- c(1,2); density.phi <- 'gammainvgamma2'
param<- c(1.8, 0.8, 8, 0.05);
simu <- mixedsde.sim(M=M,T=T,N=N,model=model,random=random,
density.phi=density.phi,param=param,sigma=sigma, invariant = 1)
X <- simu$X ; phi <- simu$phi; times <- simu$times
estim.method<- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,
estim.method= 'nonparam')
outputsNP <- out(estim)
summary(estim)
print(estim); proc.time()-pr
N
pr <- proc.time(); model = 'CIR'; M <- 200;  T <- 10 ; delta <- 0.1; N <- floor(T/delta); sigma <- 0.01
random <- c(1,2); density.phi <- 'gammainvgamma2'
param<- c(1.8, 0.8, 8, 0.05);
simu <- mixedsde.sim(M=M,T=T,N=N,model=model,random=random,
density.phi=density.phi,param=param,sigma=sigma, invariant = 1)
X <- simu$X ; phi <- simu$phi; times <- simu$times
estim.method<- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,
estim.method= 'nonparam')
outputsNP <- out(estim)
summary(estim)
print(estim); proc.time()-pr
N
estim.method<-'paramML'
estim_param <- mixedsde.fit(times= times, X= X, model= model, random= random,
estim.method = 'paramML')
outputsP <- out(estim_param)
summary(estim_param)
pr <- proc.time(); model = 'CIR'; M <- 200;  T <- 10 ; delta <- 0.1; N <- floor(T/delta); sigma <- 0.01
random <- c(1,2); density.phi <- 'gammainvgamma2'
param<- c(1.8, 0.8, 8, 0.05);
simu <- mixedsde.sim(M=M,T=T,N=N,model=model,random=random,
density.phi=density.phi,param=param,sigma=sigma, invariant = 1)
X <- simu$X ; phi <- simu$phi; times <- simu$times
estim.method<- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,
estim.method= 'nonparam')
outputsNP <- out(estim)
summary(estim)
print(estim); estim.method<-'paramML'
estim_param <- mixedsde.fit(times= times, X= X, model= model, random= random,
estim.method = 'paramML')
outputsP <- out(estim_param)
summary(estim_param)
proc.time()-pr
pr <- proc.time(); model <- "OU"
random <- c(1,2)
M <- 240     # number of trajectories, number of rows of the matrix of the data
T <- 0.3     # width of the interval of observation
delta <- 0.00015   # step time
N <- T/delta  # number of points in the time interval 2000
# load ("data/neuronal.data.rda")
data(neuronal.data)
X <- neuronal.data[[1]]
times <- neuronal.data[[2]]
#plot(times,X[10, ], type = 'l', xlab = 'time', ylab='', col = 'blue', ylim=c(0,0.016))
random <- c(1,2)
#- nonparametric estimation
estim.method <- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,  estim.method='nonparam')
#- parametric estimation
estim.method<-'paramML'
estim_param <- mixedsde.fit(times=times, X=X, model=model, random= random, estim.method= 'paramML')
#- implemented methods
# plot(estim);
print(estim); #valid(estim)
print(estim_param); #plot(estim_param);  valid(estim_param)
#test1 <- pred(estim, X,  estim.method= 'nonparam',times = times)
#test2 <- pred(estim_param, X,estim.method= 'paramML', times = times)
#- Other possible plots
par(mfrow=c(1,2))
outputsNP <-  out(estim)
outputsP <- out(estim_param)
fhat <- outputsNP$estimf
fhat_param <- outputsP$estimf
gridf <- outputsNP$gridf
gridf1 <- gridf[1,]; gridf2 <- gridf[2,]
marg1 <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat,1,sum) #with cutoff
marg2 <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat,2,sum)
marg1_param <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_param,1,sum)
marg2_param <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_param,2,sum)
plot(gridf1,marg1,type='l', col='red')
lines(gridf1,marg1_param, lwd=2, col='red')
plot(gridf2, marg2,type='l', col='red')
lines(gridf2,marg2_param, lwd=2, col='red')
proc.time()-pr
pr <- proc.time(); ind <- seq(1, 2000, by = 10)
estim_Bayes <- mixedsde.fit(times[ind], X[,ind], model = "OU", random = 1,
estim.method = "paramBayes", nMCMC = 1000)
plot(estim_Bayes)
pred_Bayes1 <- pred(estim_Bayes)
pred_Bayes2 <- pred(estim_Bayes, trajectories = TRUE)
}
proc.time()-pr
pr <- proc.time(); ind <- seq(1, 2000, by = length = 100)
estim_Bayes <- mixedsde.fit(times[ind], X[,ind], model = "OU", random = 1,
estim.method = "paramBayes", nMCMC = 100)
plot(estim_Bayes)
pred_Bayes1 <- pred(estim_Bayes)
pred_Bayes2 <- pred(estim_Bayes, trajectories = TRUE)
}
proc.time()-pr
dim(X[,ind])
pr <- proc.time(); ind <- seq(1, 2000, length = 100)
estim_Bayes <- mixedsde.fit(times[ind], X[,ind], model = "OU", random = 1,
estim.method = "paramBayes", nMCMC = 100)
plot(estim_Bayes)
pred_Bayes1 <- pred(estim_Bayes)
pred_Bayes2 <- pred(estim_Bayes, trajectories = TRUE)
}
proc.time()-pr
length(seq(1,2000, by=10))
pr <- proc.time(); ind <- seq(1, 2000, by = 20)
estim_Bayes <- mixedsde.fit(times[ind], X[1:50, ind], model = "OU", random = 1,
estim.method = "paramBayes", nMCMC = 1000)
pr <- proc.time(); ind <- seq(1, 2000, by = 20)
estim_Bayes <- mixedsde.fit(times[ind], X[1:50, ind], model = "OU", random = 1,
estim.method = "paramBayes", nMCMC = 100)
plot(estim_Bayes)
pred_Bayes1 <- pred(estim_Bayes)
pred_Bayes2 <- pred(estim_Bayes, trajectories = TRUE)
proc.time()-pr
pr <- proc.time(); model <- "OU"
random <- c(1,2)
M <- 240     # number of trajectories, number of rows of the matrix of the data
T <- 0.3     # width of the interval of observation
delta <- 0.00015   # step time
N <- T/delta  # number of points in the time interval 2000
# load ("data/neuronal.data.rda")
data(neuronal.data)
X <- neuronal.data[[1]]
times <- neuronal.data[[2]]
#plot(times,X[10, ], type = 'l', xlab = 'time', ylab='', col = 'blue', ylim=c(0,0.016))
random <- c(1,2)
#- nonparametric estimation
estim.method <- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,  estim.method='nonparam')
#- parametric estimation
estim.method<-'paramML'
estim_param <- mixedsde.fit(times=times, X=X, model=model, random= random, estim.method= 'paramML')
#- implemented methods
# plot(estim);
print(estim); #valid(estim)
print(estim_param); #plot(estim_param);  valid(estim_param)
#test1 <- pred(estim, X,  estim.method= 'nonparam',times = times)
#test2 <- pred(estim_param, X,estim.method= 'paramML', times = times)
#- Other possible plots
par(mfrow=c(1,2))
outputsNP <-  out(estim)
outputsP <- out(estim_param)
fhat <- outputsNP$estimf
fhat_param <- outputsP$estimf
gridf <- outputsNP$gridf
gridf1 <- gridf[1,]; gridf2 <- gridf[2,]
marg1 <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat,1,sum) #with cutoff
marg2 <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat,2,sum)
marg1_param <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_param,1,sum)
marg2_param <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_param,2,sum)
plot(gridf1,marg1,type='l', col='red')
lines(gridf1,marg1_param, lwd=2, col='red')
plot(gridf2, marg2,type='l', col='red')
lines(gridf2,marg2_param, lwd=2, col='red')
proc.time()-pr
dim(X)
pr <- proc.time(); model <- "OU"
random <- c(1,2)
M <- 240     # number of trajectories, number of rows of the matrix of the data
T <- 0.3     # width of the interval of observation
delta <- 0.00015   # step time
N <- T/delta  # number of points in the time interval 2000
# load ("data/neuronal.data.rda")
data(neuronal.data)
ind <- seq(1, 2000, by = 100)
X <- neuronal.data[[1]][, ind]
times <- neuronal.data[[2]][ind]
#plot(times,X[10, ], type = 'l', xlab = 'time', ylab='', col = 'blue', ylim=c(0,0.016))
random <- c(1,2)
#- nonparametric estimation
estim.method <- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,  estim.method='nonparam')
#- parametric estimation
estim.method<-'paramML'
estim_param <- mixedsde.fit(times=times, X=X, model=model, random= random, estim.method= 'paramML')
#- implemented methods
# plot(estim);
print(estim); #valid(estim)
print(estim_param); #plot(estim_param);  valid(estim_param)
#test1 <- pred(estim, X,  estim.method= 'nonparam',times = times)
#test2 <- pred(estim_param, X,estim.method= 'paramML', times = times)
#- Other possible plots
par(mfrow=c(1,2))
outputsNP <-  out(estim)
outputsP <- out(estim_param)
fhat <- outputsNP$estimf
fhat_param <- outputsP$estimf
gridf <- outputsNP$gridf
gridf1 <- gridf[1,]; gridf2 <- gridf[2,]
marg1 <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat,1,sum) #with cutoff
marg2 <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat,2,sum)
marg1_param <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_param,1,sum)
marg2_param <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_param,2,sum)
plot(gridf1,marg1,type='l', col='red')
lines(gridf1,marg1_param, lwd=2, col='red')
plot(gridf2, marg2,type='l', col='red')
lines(gridf2,marg2_param, lwd=2, col='red')
proc.time()-pr
length(ind)
pr <- proc.time(); model <- "OU"
random <- c(1,2)
M <- 240     # number of trajectories, number of rows of the matrix of the data
T <- 0.3     # width of the interval of observation
delta <- 0.00015   # step time
N <- T/delta  # number of points in the time interval 2000
# load ("data/neuronal.data.rda")
data(neuronal.data)
ind <- seq(1, 2000, by = 10)
X <- neuronal.data[[1]][, ind]
times <- neuronal.data[[2]][ind]
#plot(times,X[10, ], type = 'l', xlab = 'time', ylab='', col = 'blue', ylim=c(0,0.016))
random <- c(1,2)
#- nonparametric estimation
estim.method <- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,  estim.method='nonparam')
#- parametric estimation
estim.method<-'paramML'
estim_param <- mixedsde.fit(times=times, X=X, model=model, random= random, estim.method= 'paramML')
#- implemented methods
# plot(estim);
print(estim); #valid(estim)
print(estim_param); #plot(estim_param);  valid(estim_param)
#test1 <- pred(estim, X,  estim.method= 'nonparam',times = times)
#test2 <- pred(estim_param, X,estim.method= 'paramML', times = times)
#- Other possible plots
par(mfrow=c(1,2))
outputsNP <-  out(estim)
outputsP <- out(estim_param)
fhat <- outputsNP$estimf
fhat_param <- outputsP$estimf
gridf <- outputsNP$gridf
gridf1 <- gridf[1,]; gridf2 <- gridf[2,]
marg1 <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat,1,sum) #with cutoff
marg2 <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat,2,sum)
marg1_param <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_param,1,sum)
marg2_param <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_param,2,sum)
plot(gridf1,marg1,type='l', col='red')
lines(gridf1,marg1_param, lwd=2, col='red')
plot(gridf2, marg2,type='l', col='red')
lines(gridf2,marg2_param, lwd=2, col='red')
proc.time()-pr
pr <- proc.time(); model <- "OU"
random <- c(1,2)
M <- 240     # number of trajectories, number of rows of the matrix of the data
T <- 0.3     # width of the interval of observation
delta <- 0.00015   # step time
N <- T/delta  # number of points in the time interval 2000
# load ("data/neuronal.data.rda")
data(neuronal.data)
X <- neuronal.data[[1]][1:100,]
times <- neuronal.data[[2]]
#plot(times,X[10, ], type = 'l', xlab = 'time', ylab='', col = 'blue', ylim=c(0,0.016))
random <- c(1,2)
#- nonparametric estimation
estim.method <- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random,  estim.method='nonparam')
#- parametric estimation
estim.method<-'paramML'
estim_param <- mixedsde.fit(times=times, X=X, model=model, random= random, estim.method= 'paramML')
#- implemented methods
# plot(estim);
print(estim); #valid(estim)
print(estim_param); #plot(estim_param);  valid(estim_param)
#test1 <- pred(estim, X,  estim.method= 'nonparam',times = times)
#test2 <- pred(estim_param, X,estim.method= 'paramML', times = times)
#- Other possible plots
par(mfrow=c(1,2))
outputsNP <-  out(estim)
outputsP <- out(estim_param)
fhat <- outputsNP$estimf
fhat_param <- outputsP$estimf
gridf <- outputsNP$gridf
gridf1 <- gridf[1,]; gridf2 <- gridf[2,]
marg1 <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat,1,sum) #with cutoff
marg2 <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat,2,sum)
marg1_param <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_param,1,sum)
marg2_param <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_param,2,sum)
plot(gridf1,marg1,type='l', col='red')
lines(gridf1,marg1_param, lwd=2, col='red')
plot(gridf2, marg2,type='l', col='red')
lines(gridf2,marg2_param, lwd=2, col='red')
proc.time()-pr
?mixedsde.fit
roxygen2::roxygenise()
library(mixedsde)
?"mixedsde.fit"
pr <- proc.time(); model = 'CIR'; T <- 10
delta <- 0.1; M <- 100 # delta <- 0.001 and M <- 200 would yield good results
N <- floor(T/delta); sigma <- 0.01 ;
random <- c(1,2); density.phi <- 'gammainvgamma2'; param<- c(1.8, 0.8, 8, 0.05);
simu <- mixedsde.sim(M=M, T=T, N=N, model=model,random=random, density.phi=density.phi,
param=param, sigma=sigma, invariant = 1)
X <- simu$X ; phi <- simu$phi; times <- simu$times
estim.method<- 'nonparam'
estim <- mixedsde.fit(times=times, X=X, model=model, random=random, estim.method= 'nonparam')
proc.time()-pr
delta <- 0.1; M <- 100 # delta <- 0.001 and M <- 200 would yield good results
outputsNP <- out(estim)
plot(estim)
summary(estim)
print(estim)
validation <- valid(estim,  numj=floor(runif(1,1,M)))
system.time(validation <- valid(estim,  numj=floor(runif(1,1,M)))
)
pr <- proc.time(); estim.method<-'paramML'
estim_param <- mixedsde.fit(times= times, X= X, model= model, random= random,
estim.method = 'paramML')
outputsP <- out(estim_param)
#plot(estim_param)
summary(estim_param)
proc.time()-pr
pr <- proc.time(); fhat <- outputsNP$estimf
fhat_trunc <- outputsNP$estimf.trunc
fhat_param <- outputsP$estimf
gridf <- outputsNP$gridf; gridf1 <- gridf[1,]; gridf2 <- gridf[2,]
marg1 <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat,1,sum)
marg1_trunc <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_trunc,1,sum)
marg2 <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat,2,sum)
marg2_trunc <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_trunc,2,sum)
marg1_param <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_param,1,sum)
marg2_param <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_param,2,sum)
f1 <-  (gridf1^(param[1]-1))*exp(-gridf1/param[2])/((param[2])^param[1]*gamma(param[1]))
f2 <-  (gridf2^(-param[3]-1)) * exp(-(1/param[4])*(1/gridf2)) *
((1/param[4])^param[3])*(1/gamma(param[3]))
par(mfrow=c(1,2))
plot(gridf1,f1,type='l', lwd=1,  xlab='', ylab='')
lines(gridf1,marg1_trunc,col='blue', lwd=2)
lines(gridf1,marg1,col='blue', lwd=2, lty=2)
lines(gridf1,marg1_param,col='red', lwd=2, lty=2)
plot(gridf2,f2,type='l', lwd=1, xlab='', ylab='')
lines(gridf2,marg2_trunc,col='blue', lwd=2)
lines(gridf2,marg2,col='blue', lwd=2, lty=2)
lines(gridf2,marg2_param,col='red', lwd=2, lty=2)
cutoff <- outputsNP$cutoff
phihat <- outputsNP$estimphi
phihat_trunc <- outputsNP$estimphi.trunc
par(mfrow=c(1,2))
plot.ts(phi[1,], phihat[1,], xlim=c(0, 15), ylim=c(0,15), pch=18); abline(0,1)
points(phi[1,]*(1-cutoff), phihat[1,]*(1-cutoff), xlim=c(0, 20), ylim=c(0,20),pch=18, col='red');
abline(0,1)
plot.ts(phi[2,], phihat[2,], xlim=c(0, 15), ylim=c(0,15),pch=18); abline(0,1)
points(phi[2,]*(1-cutoff), phihat[2,]*(1-cutoff), xlim=c(0, 20), ylim=c(0,20),pch=18, col='red');
abline(0,1)
proc.time()-pr
pr <- proc.time(); random <- 1; sigma <- 0.1; fixed <- 5; param <- c(3, 0.5)
sim <- mixedsde.sim(M = 50, T = 1, N = 100, model = 'OU', random = random, fixed = fixed,
density.phi = 'normal',param= param, sigma= sigma, X0 = 0, op.plot = 1)
# here: only 100 iterations for example - should be much more!
estim_Bayes_withoutprior <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU',
random, estim.method = 'paramBayes',  nMCMC = 100)
prior <- list( m = c(param[1], fixed), v = c(param[1], fixed), alpha.omega = 11,
beta.omega = param[2]^2*10, alpha.sigma = 10, beta.sigma = sigma^2*9)
estim_Bayes <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU', random,
estim.method = 'paramBayes', prior = prior, nMCMC = 100)
validation <- valid(estim_Bayes, numj = 10)
plot(estim_Bayes)
outputBayes <- out(estim_Bayes)
summary(outputBayes)
(results_Bayes <- summary(estim_Bayes))
plot(estim_Bayes, style = 'cred.int', true.phi = sim$phi)
plot(estim_Bayes_withoutprior, style = 'cred.int', true.phi = sim$phi, reduced = TRUE)
plot2compare(estim_Bayes, estim_Bayes_withoutprior, names = c('with prior', 'without prior'))
print(estim_Bayes)
## Not run:
#pred.result <- pred(estim_Bayes)
#summary(out(pred.result))
###plot(pred.result)
pred.result.trajectories <- pred(estim_Bayes, trajectories = TRUE)
## End(Not run)
# second example
## Not run:
#random <- 2; sigma <- 0.2; fixed <- 5; param <- c(3, 0.5)
#sim <- mixedsde.sim(M = 20, T = 1, N = 100, model = 'CIR', random = random,
#                    fixed = fixed, density.phi = 'normal',param = param, sigma = sigma, X0 = 0.1, op.plot = 1)
##prior <- list(m = c(fixed, param[1]), v = c(fixed, param[1]), alpha.omega = 11,
#              beta.omega = param[2]^2*10, alpha.sigma = 10, beta.sigma = sigma^2*9)
#estim_Bayes <- mixedsde.fit(times = sim$times, X = sim$X, model = 'CIR', random = random,
##                           estim.method = 'paramBayes', prior = prior, nMCMC = 1000)
#plot(estim_Bayes)
#outputBayes <- out(estim_Bayes)
#summary(outputBayes)
#(results_Bayes <- summary(estim_Bayes))
#plot(estim_Bayes, style = 'cred.int', true.phi = sim$phi, reduced = TRUE)
#print(estim_Bayes)
#pred.result <- pred(estim_Bayes)
#summary(out(pred.result))
#plot(pred.result)
## End(Not run)
# for two random effects
random <- c(1,2); sigma <- 0.1; param <- c(3, 0.5, 5, 0.2)
sim <- mixedsde.sim(M = 20, T = 1, N = 100, model = 'OU', random = random,
density.phi = 'normalnormal', param = param, sigma = sigma, X0 = 0, op.plot = 1)
# here: only 200 iterations for example - should be much more!
estim_Bayes_withoutprior <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU',
random = random, estim.method = 'paramBayes', nMCMC = 100)
plot(estim_Bayes_withoutprior, style = 'cred.int', true.phi = sim$phi, reduced = TRUE)
prior <- list(m = param[c(1,3)], v = param[c(1,3)], alpha.omega = c(11,11),
beta.omega = param[c(2,4)]^2*10, alpha.sigma = 10, beta.sigma = sigma^2*9)
estim_Bayes <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU', random = random,
estim.method = 'paramBayes', prior = prior, nMCMC = 100)
outputBayes <- out(estim_Bayes)
summary(outputBayes)
summary(estim_Bayes)
plot(estim_Bayes)
plot(estim_Bayes, style = 'cred.int', true.phi = sim$phi)
print(estim_Bayes)
pred.result <- pred(estim_Bayes)
proc.time()-pr
pr <- proc.time(); random <- 1; sigma <- 0.1; fixed <- 5; param <- c(3, 0.5)
sim <- mixedsde.sim(M = 50, T = 1, N = 100, model = 'OU', random = random, fixed = fixed,
density.phi = 'normal',param= param, sigma= sigma, X0 = 0, op.plot = 1)
# here: only 100 iterations for example - should be much more!
estim_Bayes_withoutprior <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU',
random, estim.method = 'paramBayes',  nMCMC = 100)
prior <- list( m = c(param[1], fixed), v = c(param[1], fixed), alpha.omega = 11,
beta.omega = param[2]^2*10, alpha.sigma = 10, beta.sigma = sigma^2*9)
estim_Bayes <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU', random,
estim.method = 'paramBayes', prior = prior, nMCMC = 100)
validation <- valid(estim_Bayes, numj = 10)
plot(estim_Bayes)
outputBayes <- out(estim_Bayes)
summary(outputBayes)
(results_Bayes <- summary(estim_Bayes))
plot(estim_Bayes, style = 'cred.int', true.phi = sim$phi)
plot(estim_Bayes_withoutprior, style = 'cred.int', true.phi = sim$phi, reduced = TRUE)
plot2compare(estim_Bayes, estim_Bayes_withoutprior, names = c('with prior', 'without prior'))
print(estim_Bayes)
## Not run:
#pred.result <- pred(estim_Bayes)
#summary(out(pred.result))
###plot(pred.result)
pred.result.trajectories <- pred(estim_Bayes, trajectories = TRUE)
## End(Not run)
# second example
## Not run:
#random <- 2; sigma <- 0.2; fixed <- 5; param <- c(3, 0.5)
#sim <- mixedsde.sim(M = 20, T = 1, N = 100, model = 'CIR', random = random,
#                    fixed = fixed, density.phi = 'normal',param = param, sigma = sigma, X0 = 0.1, op.plot = 1)
##prior <- list(m = c(fixed, param[1]), v = c(fixed, param[1]), alpha.omega = 11,
#              beta.omega = param[2]^2*10, alpha.sigma = 10, beta.sigma = sigma^2*9)
#estim_Bayes <- mixedsde.fit(times = sim$times, X = sim$X, model = 'CIR', random = random,
##                           estim.method = 'paramBayes', prior = prior, nMCMC = 1000)
#plot(estim_Bayes)
#outputBayes <- out(estim_Bayes)
#summary(outputBayes)
#(results_Bayes <- summary(estim_Bayes))
#plot(estim_Bayes, style = 'cred.int', true.phi = sim$phi, reduced = TRUE)
#print(estim_Bayes)
#pred.result <- pred(estim_Bayes)
#summary(out(pred.result))
#plot(pred.result)
## End(Not run)
# for two random effects
random <- c(1,2); sigma <- 0.1; param <- c(3, 0.5, 5, 0.2)
sim <- mixedsde.sim(M = 20, T = 1, N = 100, model = 'OU', random = random,
density.phi = 'normalnormal', param = param, sigma = sigma, X0 = 0, op.plot = 1)
# here: only 200 iterations for example - should be much more!
estim_Bayes_withoutprior <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU',
random = random, estim.method = 'paramBayes', nMCMC = 100)
plot(estim_Bayes_withoutprior, style = 'cred.int', true.phi = sim$phi, reduced = TRUE)
prior <- list(m = param[c(1,3)], v = param[c(1,3)], alpha.omega = c(11,11),
beta.omega = param[c(2,4)]^2*10, alpha.sigma = 10, beta.sigma = sigma^2*9)
estim_Bayes <- mixedsde.fit(times = sim$times, X = sim$X, model = 'OU', random = random,
estim.method = 'paramBayes', prior = prior, nMCMC = 100)
outputBayes <- out(estim_Bayes)
summary(outputBayes)
summary(estim_Bayes)
#plot(estim_Bayes)
plot(estim_Bayes, style = 'cred.int', true.phi = sim$phi)
#print(estim_Bayes)
pred.result <- pred(estim_Bayes)
proc.time()-pr
roxygen2::roxygenise()
library(mixedsde)
