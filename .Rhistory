rm(list = ls())
devtools::load_all(".")
# packages
require("MASS")
require("plot3D")
require("roxygen2")
require("devtools")
require("sde")
require("mixedsde")
require("mvtnorm")
require("moments")
----------------------------
#-- avec CIR 2 effet aleatoires dXj(t)=(alphaj(t)-betaj Xj(t))dt+ sigma dWj(t)
#-----------------------------------------------
model <- "CIR"
random <- c(1,2)
M <- 240     # number of observations 20 200
T <- 0.3    # width of the interval of observation 10  100 300
delta <- 0.00015
N <- T/delta  # number of points in the time interval 2000
load ("~/Documents/THESE/dossier_package/package/mixedsde/data/neuronal.data.rda")
X <- neuronal.data[[1]]
times <-  neuronal.data[[2]]
plot(delta*(0:(N-1)),X[10,], type = 'l', xlab = 'time', ylab='', col = 'blue', ylim=c(0,0.016))
estim.method <- 'nonparam'
estim <- mixedsde.fit(times, X, model= model, random = random, estim.method = "nonparam")# , gridf=gridf)
outputsNP <- Freq.out(estim)
model <- "CIR"
random <- c(1,2)
M <- 240     # number of observations 20 200
T <- 0.3    # width of the interval of observation 10  100 300
delta <- 0.00015
N <- T/delta  # number of points in the time interval 2000
estim.method <- 'nonparam'
estim <- mixedsde.fit(times, X, model= model, random = random, estim.method = "nonparam")# , gridf=gridf)
outputsNP <- Freq.out(estim)
outputsNP <- out(estim)
estim.method<-'paramML'
estim_param <- mixedsde.fit(times=times, X=X, model=model, random= random, estim.method= 'paramML')
outputsP <- out(estim_param)
index <- outputsNP$index   #it excludes 168 and 224
fhatT03CIR <- outputsNP$estimf
fhat_paramT03CIR <- outputsP$estimf
gridf <- outputsNP$gridf
gridf1 <- gridf[1,]
gridf2 <- gridf[2,]
marg1T03CIR <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhatT03CIR,1,sum) #with cutoff
marg2T03CIR <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhatT03CIR,2,sum)
marg1_paramT03CIR <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_paramT03CIR,1,sum) #with cutoff
marg2_paramT03CIR <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_paramT03CIR,2,sum)
gridf1CIR <- gridf[1,]
gridf2CIR <- gridf[2,]
op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)
plot(gridf1,marg1_paramT03CIR,col='red', lwd=2, lty =2, type='l')
lines(gridf1,marg1T03CIR,col='red', lwd=2)
plot(gridf2,marg2_paramT03CIR,col='red', lwd=2, lty =2, type='l')
lines(gridf2,marg2T03CIR,col='red', lwd=2)
model <- "OU"
random <- c(1,2)
M <- 240     # number of observations 20 200
T <- 0.3    # width of the interval of observation 10  100 300
delta <- 0.00015
N <- T/delta  # number of points in the time interval 2000
X <- neuronal.data[[1]]
times <-  neuronal.data[[2]]
plot(delta*(0:(N-1)),X[10, ], type = 'l', xlab = 'time', ylab='', col = 'blue', ylim=c(0,0.016))
estim.method <- 'nonparam'
estim <- mixedsde.fit(times, X, model= model, random = random, estim.method = "nonparam")# , gridf=gridf)
outputsNP <- out(estim)
sum(outputsNP$cutoff)
estim.method<-'paramML'
estim_param <- mixedsde.fit(times=times, X=X, model=model, random= random, estim.method= 'paramML')
outputsP <- out(estim_param)
fhatT03OU <- outputsNP$estimf
fhatT03OU_trunc <- outputsNP$estimf_trunc
fhat_paramT03OU <- outputsP$estimf
gridf <- outputsNP$gridf
gridf1 <- gridf[1,]
gridf2 <- gridf[2,]
marg1T03OU <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhatT03OU,1,sum)
marg2T03OU <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhatT03OU,2,sum)
marg1_paramT03OU <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhat_paramT03OU,1,sum)
marg2_paramT03OU <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhat_paramT03OU,2,sum)
marg1T03OU_trunc <- ((max(gridf2)-min(gridf2))/length(gridf2))*apply(fhatT03OU_trunc,1,sum)
marg2T03OU_trunc <- ((max(gridf1)-min(gridf1))/length(gridf1))*apply(fhatT03OU_trunc,2,sum)
gridf1OU <- gridf[1,]
gridf2OU <- gridf[2,]
op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)
plot(gridf1OU,marg1_paramT03OU,col='blue', lwd=2, lty =2, type='l')
lines(gridf1OU,marg1T03OU,col='blue', lwd=2);lines(gridf1CIR,marg1T03CIR,col='green', lwd=2);lines(gridf1CIR,marg1_paramT03CIR,col='green', lwd=2, lty=2)
plot(gridf2OU,marg2_paramT03OU,col='blue', lwd=2, lty =2, type='l')
lines(gridf2OU,marg2T03OU,col='blue', lwd=2);lines(gridf2CIR,marg2T03CIR,col='green', lwd=2);lines(gridf2CIR,marg2_paramT03CIR,col='green', lwd=2, lty=2)
op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7, xlab="", ylab="")
plot(gridf1OU,marg1_paramT03OU,col='blue', lwd=2, lty =2, type='l')
lines(gridf1OU,marg1T03OU,col='blue', lwd=2);lines(gridf1CIR,marg1T03CIR,col='green', lwd=2);lines(gridf1CIR,marg1_paramT03CIR,col='green', lwd=2, lty=2)
plot(gridf2OU,marg2_paramT03OU,col='blue', lwd=2, lty =2, type='l')
lines(gridf2OU,marg2T03OU,col='blue', lwd=2);lines(gridf2CIR,marg2T03CIR,col='green', lwd=2);lines(gridf2CIR,marg2_paramT03CIR,col='green', lwd=2, lty=2)
op <- par(mfrow = c(1, 2), mar = c(2.8, 2.8, 2, 2), mgp = c(1.5, 0.5, 0), oma = c(0, 0, 0, 0), cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.7)
plot(gridf1OU,marg1_paramT03OU,col='blue', lwd=2, lty =2, type='l', xlab="", ylab="")
lines(gridf1OU,marg1T03OU,col='blue', lwd=2);lines(gridf1CIR,marg1T03CIR,col='green', lwd=2);lines(gridf1CIR,marg1_paramT03CIR,col='green', lwd=2, lty=2)
plot(gridf2OU,marg2_paramT03OU,col='blue', lwd=2, lty =2, type='l', xlab="", ylab="")
lines(gridf2OU,marg2T03OU,col='blue', lwd=2);lines(gridf2CIR,marg2T03CIR,col='green', lwd=2);lines(gridf2CIR,marg2_paramT03CIR,col='green', lwd=2, lty=2)
sqrt(0)
rm(list = ls())
devtools::load_all(".")
# packages
require("MASS")
require("plot3D")
require("roxygen2")
require("devtools")
require("sde")
require("mixedsde")
require("mvtnorm")
require("moments")
devtools::load_all(".")
document()
rm(list = ls())
devtools::load_all(".")
# packages
require("MASS")
require("plot3D")
require("roxygen2")
require("devtools")
require("sde")
require("mixedsde")
require("mvtnorm")
require("moments")
